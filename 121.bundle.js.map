{"version":3,"file":"121.bundle.js","mappings":"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","sources":["webpack:///./src/Model/satellite.js","webpack:///./src/Model/simulation.js","webpack:///./src/Util/astronomy.js","webpack:///./src/Util/power.js"],"sourcesContent":["/* eslint-disable array-callback-return */\n/* eslint-disable consistent-return */\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  twoline2satrec,\n  generateTLE,\n  getOrbitAtTime,\n} from '../Util/astronomy';\nimport { SIM_LENGTH } from '../Util/constants';\n\nconst PV_SOURCES = {\n  sunOnly: {\n    name: 'sun',\n    efficiency: 1,\n  },\n  beamOnly: {\n    name: 'beam',\n    efficiency: 1,\n  },\n  sunAndBeam: {\n    name: 'sun and beam',\n    efficiency: 1.5,\n  },\n  eclipsed: {\n    name: 'eclipsed',\n    efficiency: 0,\n  },\n};\n\nconst POWER_SAT_REQUEST = {\n  power: {\n    pv: {\n      voltage: 4.7,\n      currentDensity: 170.5,\n      area: 0.0128,\n      powerStoringConsumption: 1.2,\n    },\n    battery: {\n      voltage: 3.6,\n      capacity: 1.125,\n    },\n  },\n  duties: [\n    {\n      name: 'beaming',\n      duration: null,\n      cycles: null,\n      consumption: 3.2,\n      type: 'space power',\n    },\n  ],\n};\n\nfunction generatePowerProfiles(pv, duties, battery) {\n  const { area, voltage, currentDensity } = pv;\n  const newPowerProfiles = [];\n  Object.entries(pv.sources).forEach((pvSource) => {\n    const current = currentDensity * pvSource[1].efficiency * area;\n    const pvPower = current * voltage;\n    const loadProfiles = [];\n    duties.forEach((duty) => {\n      const netPower = pvPower - duty.consumption;\n      const netCurrent = netPower / battery.voltage;\n      loadProfiles.push(netCurrent);\n    });\n    newPowerProfiles[pvSource[1].name] = loadProfiles;\n  });\n  return newPowerProfiles;\n}\n\nfunction getDutyIntervals(duty, period, time) {\n  const cycles = Number(duty.cycles);\n  const duration = Number(duty.duration) * 1000;\n  const interval = (period - (duration * cycles)) / cycles;\n  const totalCycles = Math.floor((SIM_LENGTH / period) * cycles);\n  return Array.from({ length: totalCycles }, (value, index) => {\n    const start = time.valueOf() + (interval * (index + 1)) + (duration * index);\n    return {\n      start,\n      end: start + duration,\n    };\n  });\n}\n\nfunction createSatellite(satellite, constellation, isCustomer = true) {\n  const tles = generateTLE({\n    ...satellite.orbit,\n    epoch: new Date(satellite.orbit.epoch),\n  });\n\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  try {\n    getOrbitAtTime({ orbit }, new Date());\n  } catch (err) {\n    const error = `Unable to propagate orbital parameters for ${satellite.orbit.tle}. ${\n      isCustomer ? '\\nPlease try different values or choose a TLE.' : '\\nPlease try different offsets in the power configuration menu.'}`;\n    throw new Error(error);\n  }\n\n  orbit.period = (2 * Math.PI * 60 * 1000) / orbit.no;\n\n  const pv = {\n    sources: PV_SOURCES,\n    voltage: satellite.power.pv.voltage,\n    currentDensity: satellite.power.pv.currentDensity,\n    area: satellite.power.pv.area,\n  };\n\n  const battery = {\n    voltage: satellite.power.battery.voltage,\n    capacity: satellite.power.battery.capacity,\n  };\n\n  const duties = satellite.duties.map((duty) => ({\n    name: duty.name,\n    type: duty.type,\n    priority: duty.priority,\n    consumption: Number(duty.consumption),\n    duration: (Number(duty.duration) * 1000) || null,\n    cycles: Number(duty.cycles) || null,\n    intervals: duty.type === 'cyclical' ? getDutyIntervals(duty, orbit.period, orbit.epochdate) : null,\n  }));\n\n  duties.unshift({\n    name: 'Power storing',\n    type: 'power storing',\n    consumption: satellite.power.pv.powerStoringConsumption,\n  });\n  const powerProfiles = generatePowerProfiles(pv, duties, battery);\n  return {\n    name: satellite.name,\n    color: satellite.color,\n    constellation,\n    id: satellite.id,\n    params: {\n      orbit,\n      battery,\n      pv,\n      load: {\n        powerProfiles,\n        duties,\n      },\n    },\n    isCustomer,\n  };\n}\n\nfunction createPowerSatellite(name, orbit, offsets, constellation) {\n  const newOrbit = { ...orbit };\n  Object.entries(offsets).forEach((offset) => {\n    newOrbit[offset[0]] = orbit[offset[0]] + Number(offset[1]);\n  });\n\n  const request = {\n    ...POWER_SAT_REQUEST,\n    name,\n    color: '#28d659',\n    id: uuidv4(),\n    orbit: newOrbit,\n  };\n  return createSatellite(request, constellation, false);\n}\n\nfunction generateIndices(spacePowersCount, customersCount) {\n  const ratio = customersCount / spacePowersCount;\n  return Array.from({ length: spacePowersCount }, (v, i) => Math.floor(ratio * i));\n}\n\nfunction getIndexCounts(customersCount, indices) {\n  return Array.from(\n    { length: customersCount },\n    (v, i) => indices.filter((index) => index === i).length,\n  );\n  // if (spacePowers === 0) return [];\n  // if (spacePowers === customers) return Array.from({ length: customers }, (v, i) => 1);\n  // if (spacePowers < customers) {\n  //   const spacing = Math.floor(customers / spacePowers);\n  //   let total = 0;\n  //   return Array.from({ length: customers }, (value, index) => {\n  //     if (index % spacing) return null;\n  //     total += 1;\n  //     if (total > spacePowers) return null;\n  //     return 1;\n  //   });\n  // }\n  // if (spacePowers > customers) {\n  //   let ratio = Math.ceil(spacePowers / customers);\n  //   let total = 0;\n  //   return Array.from(\n  //     { length: customers },\n  //     () => {\n  //       if ((total + ratio) > spacePowers) ratio = spacePowers - total;\n  //       total += 1;\n  //       return ratio;\n  //     },\n  //   );\n  // }\n}\n\nfunction getOffsets(offsets, counts) {\n  return counts.map((count) => {\n    if (count === 0) return null;\n    if (count === 1) return [offsets];\n    if (count > 1) {\n      let multiplier = 0;\n      return Array.from({ length: count }, (v, index) => {\n        if (index % 2 === 0) multiplier += 1;\n        const newOffsets = {};\n        Object.entries(offsets).forEach((offset) => {\n          newOffsets[offset[0]] = offset[1] * multiplier * ((0 - 1) ** index);\n        });\n        return newOffsets;\n      });\n    }\n  });\n}\n\nexport {\n  createSatellite, createPowerSatellite, getOffsets, generateIndices, getIndexCounts,\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable max-len */\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport {\n  getOrbitAtTime, getSunPosition, getEarthRotationAngle, getDistance,\n} from '../Util/astronomy';\nimport { isEclipsed, getChargeState, getNetCurrent } from '../Util/power';\nimport { SIM_LENGTH, BEAM_DISTANCE } from '../Util/constants';\n\nfunction getTimeArray(initial, length, frames) {\n  const initialMillisecs = initial.getTime();\n  const mspf = length / frames;\n  return Array.from({ length: frames }, (value, index) => {\n    const time = initialMillisecs + index * mspf;\n    return time;\n  });\n}\n\nfunction getSatellitePositions(satellite, timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getOrbitAtTime(satellite, new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getSunPositions(timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getSunPosition(new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getEarthRotationAngles(timeArray) {\n  return timeArray.map((time) => getEarthRotationAngle(time));\n}\n\nfunction getEclipsedArray(satellite, sun, timeArray) {\n  return timeArray.map((time, index) => {\n    const satPosition = {\n      x: satellite.positions.x[index],\n      y: satellite.positions.y[index],\n      z: satellite.positions.z[index],\n    };\n\n    const sunPosition = {\n      x: sun.x[index],\n      y: sun.y[index],\n      z: sun.z[index],\n    };\n    return isEclipsed(satPosition, sunPosition);\n  });\n}\n\nfunction getCurrentDuties(duties, timeArray) {\n  return timeArray.map((time) => {\n    let currentDuty = 0;\n    duties.forEach((duty, index) => {\n      if (duty.type === 'power storing') return;\n      duty.intervals.forEach((cycle) => {\n        if ((time >= cycle.start) && (time <= cycle.end)) {\n          if (currentDuty === 0 || (duty.priority < duties[currentDuty].priority)) {\n            currentDuty = index;\n          }\n        }\n      });\n    });\n    return currentDuty;\n  });\n}\n\nfunction getBeams(spacePower, customers, timeArray) {\n  return customers.map((customer) => {\n    const beamName = `${spacePower.name} - ${customer.name}`;\n    const distances = timeArray.map((time, index) => {\n      const spacePowerPosition = {\n        x: spacePower.positions.x[index],\n        y: spacePower.positions.y[index],\n        z: spacePower.positions.z[index],\n      };\n      const customerPosition = {\n        x: customer.positions.x[index],\n        y: customer.positions.y[index],\n        z: customer.positions.z[index],\n      };\n      return getDistance(spacePowerPosition, customerPosition);\n    });\n    const activated = distances.map((distance) => {\n      if ((distance * earthRadius) < BEAM_DISTANCE) return true;\n      return false;\n    });\n    return {\n      name: beamName,\n      distances,\n      activated,\n      customerId: customer.id,\n      spacePowerId: spacePower.id,\n      id: uuidv4(),\n    };\n  });\n}\n\nfunction getBeamDuties(beams, timeArray) {\n  return timeArray.map((time, index) => (beams.reduce((prev, current) => current.activated[index] || prev, false) ? 1 : 0));\n}\n\nfunction getSource(satellite, beams, index) {\n  let hasBeam;\n  if (beams) {\n    const satBeams = beams.filter((b) => b.customerId === satellite.id);\n    hasBeam = satBeams.reduce((prev, current) => current.activated[index] || prev, false);\n  } else {\n    hasBeam = false;\n  }\n\n  const hasSun = !satellite.performance.isEclipsed[index];\n\n  if (!hasSun && hasBeam) return 'beam';\n  if (hasSun && hasBeam) return 'sun and beam';\n  if (!hasSun && !hasBeam) return 'eclipsed';\n  if (hasSun && !hasBeam) return 'sun';\n}\n\nfunction getSources(satellite, beams, timeArray) {\n  return timeArray.map((time, index) => getSource(satellite, beams, index));\n}\n\nfunction getChargeStates(satellite, timeArray, hasBeams = true) {\n  const delta = ((SIM_LENGTH / (60 * 60 * 1000)) / timeArray.length);\n  let chargeState = 1;\n  return timeArray.map((time, index) => {\n    let source = satellite.performance.sources[index];\n    if (hasBeams === false) {\n      if (source === 'sun and beam') source = 'sun';\n      if (source === 'beam') source = 'eclipsed';\n    }\n    chargeState = getChargeState(satellite.params, satellite.performance.currentDuties[index], source, chargeState, delta);\n    if (chargeState > 1) return 1;\n    if (chargeState < 0) return 0;\n    return chargeState;\n  });\n}\n\nfunction getDischargeSaved(satellite) {\n  let timeCharged = 0;\n  const totalCurrentBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    return netCurrent + prev;\n  }, 0);\n  const totalDischargeBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    if (netCurrent < 0) return netCurrent + prev;\n    return prev;\n  }, 0);\n  const totalCurrentNoBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    let sourceNoBeams = source;\n    if (source === 'sun and beam') {\n      sourceNoBeams = 'sun';\n      timeCharged += 1;\n    } else if (source === 'beam') {\n      timeCharged += 1;\n      sourceNoBeams = 'eclipsed';\n    }\n    const netCurrentNoBeams = getNetCurrent(satellite.params, sourceNoBeams, currentDuty);\n    return netCurrentNoBeams + prev;\n  }, 0);\n  const frames = satellite.performance.sources.length;\n  const totalHours = (SIM_LENGTH / (1000 * 60 * 60)) / frames;\n  const totalDischarge = Math.abs(totalDischargeBeams * totalHours);\n  const dischargeSaved = (totalCurrentBeams - totalCurrentNoBeams) * totalHours;\n  timeCharged = ((timeCharged / frames) * SIM_LENGTH) / (1000 * 60);\n  return [totalDischarge, dischargeSaved, timeCharged];\n}\n\nfunction getLowestChargeState(satellite) {\n  const lowestBeams = satellite.performance.chargeState.reduce((prev, current) => (current < prev ? current : prev), 1);\n  const lowestNoBeams = satellite.performance.chargeStateNoBeams.reduce((prev, current) => (current < prev ? current : prev), 1);\n  return [lowestBeams, lowestNoBeams];\n}\n\nexport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEarthRotationAngles,\n  getEclipsedArray,\n  getCurrentDuties,\n  getSources,\n  getChargeStates,\n  getBeams,\n  getBeamDuties,\n  getDischargeSaved,\n  getLowestChargeState,\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-continue */\n/* eslint-disable no-console */\n/* eslint-disable import/prefer-default-export */\nimport {\n  pi,\n  tumin,\n  deg2rad,\n  earthRadius,\n} from 'satellite.js/lib/constants';\n\nimport { jday, days2mdhms } from 'satellite.js/lib/ext';\n\nimport sgp4init from 'satellite.js/lib/propagation/sgp4init';\n\nimport * as satelliteUtils from 'satellite.js';\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\nfunction extractTLE(longstr1, longstr2) {\n  const orbitElements = {};\n\n  orbitElements.epochYear = parseInt(longstr1.substring(18, 20), 10);\n  orbitElements.epochDays = parseFloat(longstr1.substring(20, 32));\n  orbitElements.meanMotionDot = parseFloat(longstr1.substring(33, 43));\n  orbitElements.meanMotionDoubleDot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  orbitElements.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n\n  // satrec.satnum = longstr2.substring(2, 7);\n  orbitElements.inclination = parseFloat(longstr2.substring(8, 16));\n  orbitElements.rightAscension = parseFloat(longstr2.substring(17, 25));\n  orbitElements.eccentricity = parseFloat(`.${longstr2.substring(26, 33)}`);\n  orbitElements.perigee = parseFloat(longstr2.substring(34, 42));\n  orbitElements.meanAnomaly = parseFloat(longstr2.substring(43, 51));\n  orbitElements.meanMotion = parseFloat(longstr2.substring(52, 63));\n  let year;\n  if (orbitElements.epochYear < 57) {\n    year = orbitElements.epochYear + 2000;\n  } else {\n    year = orbitElements.epochYear + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, orbitElements.epochDays);\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  orbitElements.epoch = new Date(year, mon, day, hr, minute, sec);\n\n  return orbitElements;\n}\n\nfunction daysIntoYear(date) {\n  return (\n    (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n      - Date.UTC(date.getFullYear(), 0, 0))\n    / 24\n    / 60\n    / 60\n    / 1000\n  );\n}\n\nfunction generateTLE(orbitElements) {\n  const {\n    epoch,\n    meanMotionDot,\n    bstar,\n    inclination,\n    rightAscension,\n    eccentricity,\n    perigee,\n    meanAnomaly,\n    meanMotion,\n  } = orbitElements;\n  let epochYr = String(epoch.getYear());\n  if (epochYr > 100) epochYr = epochYr.substring(1);\n\n  let epochDay = daysIntoYear(epoch);\n  if (epochDay < 100) epochDay = `0${epochDay}`;\n\n  const epochFraction = String(\n    (\n      epoch.getHours() / 24\n      + epoch.getMinutes() / (60 * 24)\n      + epoch.getSeconds() / (60 * 60 * 24)\n    ).toFixed(8),\n  ).substring(1);\n\n  let meanMotionDotString = String(\n    Number(meanMotionDot).toFixed(8),\n  ).substring(1);\n  if (meanMotionDot < 0) { meanMotionDotString = `-${meanMotionDotString.substring(1)}`; }\n  if (meanMotionDot >= 0) { meanMotionDotString = ` ${meanMotionDotString}`; }\n\n  let bstarMant = String(Number(bstar).toExponential(5))\n    .split('.')\n    .join('')\n    .substring(0, 6);\n  if (bstar >= 0) bstarMant = ` ${bstarMant.substring(0, 5)}`;\n  let bstarExp = 0;\n  if (Number(bstar) !== 0) bstarExp = Math.ceil(Math.log10(Math.abs(bstar)));\n  else bstarExp = '+0';\n\n  const tle1 = `1 00000C 00000A   ${epochYr}${epochDay}${epochFraction} ${meanMotionDotString}  00000-0 ${bstarMant}${bstarExp} 0  0000`;\n  const inclinationString = String(Number(inclination).toFixed(4));\n  // if (inclination < 100) inclinationString = ` ${inclinationString}`;\n\n  const rightAscensionString = String(Number(rightAscension).toFixed(4));\n  // if (rightAscension < 100) { rightAscensionString = ` ${rightAscensionString}`; }\n\n  const eccentricityString = String(\n    Number(eccentricity).toFixed(8),\n  ).substring(2, 9);\n  let perigeeString = String(Number(perigee).toFixed(4));\n  if (perigee < 100) perigeeString = ` ${perigeeString}`;\n\n  const meanAnomalyString = String(Number(meanAnomaly).toFixed(4));\n  // if (meanAnomalyString < 100) { meanAnomalyString = ` ${meanAnomalyString}`; }\n\n  const meanMotionString = String(Number(meanMotion).toPrecision(9));\n  const tle2 = `2 00000 ${inclinationString.padStart(8)} ${rightAscensionString.padStart(8)} ${eccentricityString} ${perigeeString.padStart(8)} ${meanAnomalyString} ${meanMotionString.padStart(13)}    00`;\n\n  return {\n    tle1,\n    tle2,\n  };\n}\n\nfunction twoline2satrec(longstr1, longstr2) {\n  const opsmode = 'i';\n  const xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n  let year = 0;\n\n  const satrec = {};\n  satrec.error = 0;\n\n  satrec.satnum = longstr1.substring(2, 7);\n\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  satrec.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n  // satrec.satnum = longstr2.substring(2, 7);\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(`.${longstr2.substring(26, 33)}`);\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63));\n  // ---- find no, ndot, nddot ----\n  satrec.notle = satrec.no;\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n  // ---- convert to sgp4 units ----\n  satrec.a = (satrec.no * tumin) ** (-2.0 / 3.0);\n  satrec.ndottle = satrec.ndot;\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n  satrec.nddot /= xpdotp * 1440.0 * 1440;\n\n  // ---- find standard orbital elements ----\n  satrec.inclotle = satrec.inclo;\n  satrec.inclo *= deg2rad;\n  satrec.nodeotle = satrec.nodeo;\n  satrec.nodeo *= deg2rad;\n  satrec.argpotle = satrec.argpo;\n  satrec.argpo *= deg2rad;\n  satrec.motle = satrec.mo;\n  satrec.mo *= deg2rad;\n\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0;\n\n  // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, satrec.epochdays);\n\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec);\n  satrec.epochdate = new Date(year, mon, day, hr, minute, sec);\n  satrec.epochdatetimelocal = new Date(\n    satrec.epochdate.getTime() - satrec.epochdate.getTimezoneOffset() * 60000,\n  ).toISOString().substring(0, 19);\n\n  //  ---------------- initialize the orbit at sgp4epoch -------------------\n  sgp4init(satrec, {\n    opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo,\n  });\n\n  return satrec;\n}\n\nfunction getCorsFreeUrl(url) {\n  return `https://api.allorigins.win/raw?url=${url}`;\n}\n\nfunction parseTLEs(fileContent) {\n  const result = [];\n  const lines = fileContent.split('\\n');\n  if (lines < 2) throw new Error('Error parsing TLE');\n  let current = null;\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i].trim();\n    if (line.length === 0) continue;\n\n    if (line[0] !== '1' && line[0] !== '2') {\n      current = {\n        name: line,\n      };\n    } else if (line[0] === '1') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle1: line },\n      };\n    } else if (line[0] === '2') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle2: line },\n      };\n      result.push(current);\n    } else throw new Error('Error parsing TLE');\n  }\n\n  return result;\n}\n\nfunction loadTLEsJSON(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => JSON.parse(text));\n    }\n  });\n}\n\nfunction loadTLEs(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => {\n        const satellites = parseTLEs(text);\n        return satellites;\n      });\n    }\n  });\n}\n\nconst toThree = (v) => ({\n  x: v.x / earthRadius,\n  y: v.z / earthRadius,\n  z: -v.y / earthRadius,\n});\n\nfunction getPositionFromTLE(satellite, date) {\n  const positionVelocity = satelliteUtils.propagate(\n    satellite.orbit,\n    date,\n  );\n  const positionEci = positionVelocity.position;\n  return toThree(positionEci);\n}\n\nfunction getOrbitAtTime(satellite, time) {\n  const pos = getPositionFromTLE(satellite, time);\n  return { x: pos.x, y: pos.y, z: pos.z };\n}\n\nfunction getSunPosition(time) {\n  const N = time.getTime() / 86400000 + 2440587 - 2451545;\n  let L = 4.89495042 + 0.0172027923937 * N;\n  if (L > 2 * Math.PI) L -= 2 * Math.PI;\n  let g = 6.240040768 + 0.0172019703436 * N;\n  if (g > 2 * Math.PI) g -= 2 * Math.PI;\n  const longitude = L + 0.033423055 * Math.sin(g) + 0.0003490659 * Math.sin(g);\n  const distance = 1.00014 - 0.01671 * Math.cos(g) - 0.00014 * Math.cos(2 * g)\n  * (149597870.7 / earthRadius);\n  const obliquity = 0.40907027 - 6.981317008e-9 * N;\n  const y = (distance * Math.sin(obliquity) * Math.sin(longitude));\n\n  const x = (distance * Math.cos(longitude));\n  const z = -(distance * Math.cos(obliquity) * Math.sin(longitude));\n\n  return { x, y, z };\n}\n\nfunction getEarthRotationAngle(date) {\n  const JD = date / 86400000 + 2440587 - 2451545;\n  return 2 * Math.PI * (0.779057273264 + 1.002737811911355 * JD);\n}\n\nfunction getDistance(position1, position2) {\n  const a = position1.x - position2.x;\n  const b = position1.y - position2.y;\n  const c = position1.z - position2.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport {\n  twoline2satrec,\n  generateTLE,\n  extractTLE,\n  getOrbitAtTime,\n  getSunPosition,\n  getEarthRotationAngle,\n  getDistance,\n  parseTLEs,\n  getCorsFreeUrl,\n  loadTLEs,\n  loadTLEsJSON,\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/prefer-default-export */\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport { Vector3 } from 'three';\n\nconst earthPosition = new Vector3(0, 0, 0);\nconst sunPosition = new Vector3();\nconst satPosition = new Vector3();\nconst sunEarth = new Vector3();\nconst sunSat = new Vector3();\n\nfunction isEclipsed(satellite, sun) {\n  sunPosition.fromArray([sun.x, sun.y, sun.z]);\n  satPosition.fromArray([satellite.x, satellite.y, satellite.z]);\n\n  sunEarth.subVectors(earthPosition, sunPosition);\n  sunSat.subVectors(satPosition, earthPosition);\n\n  const angle = sunEarth.angleTo(sunSat);\n\n  const sunEarthDistance = sunPosition.distanceTo(earthPosition);\n  const sunSatDistance = sunPosition.distanceTo(satPosition);\n  const limbAngle = Math.atan2(earthRadius, sunEarthDistance);\n\n  if (angle > limbAngle || sunSatDistance < sunEarthDistance) {\n    return false;\n  }\n  return true;\n}\n\nfunction getNetCurrent(params, source, currentDuty) {\n  const powerProfile = params.load.powerProfiles[source];\n  return powerProfile[currentDuty];\n}\n\nfunction getChargeState(\n  params,\n  currentDuty,\n  source,\n  chargeState,\n  delta,\n) {\n  const netCurrent = getNetCurrent(params, source, currentDuty);\n  const { capacity } = params.battery;\n\n  if (chargeState >= 1.0 && netCurrent >= 0) {\n    return 1;\n  }\n\n  if (chargeState <= 0 && netCurrent <= 0) {\n    return 0;\n  }\n\n  return (\n    (\n      (chargeState * capacity)\n      + (delta * netCurrent)\n    ) / capacity\n  );\n}\n\nexport { isEclipsed, getChargeState, getNetCurrent };\n"],"names":["PV_SOURCES","sunOnly","name","efficiency","beamOnly","sunAndBeam","eclipsed","POWER_SAT_REQUEST","power","pv","voltage","currentDensity","area","powerStoringConsumption","battery","capacity","duties","duration","cycles","consumption","type","getDutyIntervals","duty","period","time","Number","interval","totalCycles","Math","floor","SIM_LENGTH","Array","from","length","value","index","start","valueOf","end","createSatellite","satellite","constellation","isCustomer","tles","generateTLE","orbit","epoch","Date","twoline2satrec","tle1","tle2","getOrbitAtTime","err","error","tle","Error","PI","no","sources","map","priority","intervals","epochdate","unshift","powerProfiles","newPowerProfiles","Object","entries","forEach","pvSource","pvPower","loadProfiles","netCurrent","push","generatePowerProfiles","color","id","params","load","createPowerSatellite","offsets","newOrbit","offset","uuidv4","generateIndices","spacePowersCount","customersCount","ratio","v","i","getIndexCounts","indices","filter","getOffsets","counts","count","multiplier","newOffsets","getTimeArray","initial","frames","initialMillisecs","getTime","mspf","getSatellitePositions","timeArray","x","y","z","pos","getSunPositions","getSunPosition","getEarthRotationAngles","getEarthRotationAngle","getEclipsedArray","sun","satPosition","positions","sunPosition","isEclipsed","getCurrentDuties","currentDuty","cycle","getBeams","spacePower","customers","customer","beamName","distances","spacePowerPosition","customerPosition","getDistance","activated","distance","earthRadius","BEAM_DISTANCE","customerId","spacePowerId","getBeamDuties","beams","reduce","prev","current","getSources","hasBeam","b","hasSun","performance","getSource","getChargeStates","hasBeams","delta","chargeState","source","getChargeState","currentDuties","getDischargeSaved","timeCharged","totalCurrentBeams","getNetCurrent","totalDischargeBeams","totalCurrentNoBeams","sourceNoBeams","totalHours","totalDischarge","abs","dischargeSaved","getLowestChargeState","chargeStateNoBeams","orbitElements","meanMotionDot","bstar","inclination","rightAscension","eccentricity","perigee","meanAnomaly","meanMotion","epochYr","String","getYear","substring","epochDay","date","UTC","getFullYear","getMonth","getDate","epochFraction","getHours","getMinutes","getSeconds","toFixed","meanMotionDotString","bstarMant","toExponential","split","join","bstarExp","ceil","log10","inclinationString","rightAscensionString","eccentricityString","perigeeString","meanAnomalyString","meanMotionString","toPrecision","padStart","longstr1","longstr2","xpdotp","pi","year","satrec","satnum","epochyr","parseInt","epochdays","parseFloat","ndot","nddot","inclo","nodeo","ecco","argpo","mo","notle","a","tumin","ndottle","inclotle","deg2rad","nodeotle","argpotle","motle","alta","altp","mdhmsResult","days2mdhms","mon","day","hr","minute","sec","jdsatepoch","jday","epochdatetimelocal","getTimezoneOffset","toISOString","sgp4init","opsmode","satn","xbstar","xecco","xargpo","xinclo","xmo","xno","xnodeo","satelliteUtils","position","getPositionFromTLE","N","L","g","longitude","sin","cos","obliquity","JD","position1","position2","c","sqrt","earthPosition","Vector3","sunEarth","sunSat","fromArray","subVectors","angle","angleTo","sunEarthDistance","distanceTo","sunSatDistance","atan2"],"sourceRoot":""}