{"version":3,"file":"955.bundle.js","mappings":";wNAsBsB,WAEtB,MAAMA,EAAkBC,EAAAA,KAAaC,MAAM,CACzCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,OACHC,MAAON,EAAAA,KACJK,OACAE,QAAQ,iCACXC,MAAOR,EAAAA,KAAaC,MAAM,CACxBQ,IAAKT,EAAAA,KACLU,KAAMV,EAAAA,KACNW,cAAeX,EAAAA,KACZG,KAAK,EAAG,wBACRC,IAAI,EAAG,uBACPQ,SAAS,6BACZC,MAAOb,EAAAA,KACJG,KAAK,EAAG,4BACRC,IAAI,EAAG,4BACPQ,SAAS,qBACZE,YAAad,EAAAA,KACVG,IAAI,EAAG,kBACPC,IAAI,IAAK,kBACTQ,SAAS,2BACZG,eAAgBf,EAAAA,KACbG,IAAI,EAAG,kBACPC,IAAI,IAAK,kBACTQ,SAAS,+BACZI,aAAchB,EAAAA,KACXG,IAAI,EAAG,2BACPC,IAAI,EAAG,2BACPQ,SAAS,4BACZK,QAASjB,EAAAA,KACNG,IAAI,EAAG,kBACPC,IAAI,IAAK,kBACTQ,SAAS,uBACZM,YAAalB,EAAAA,KACVG,IAAI,EAAG,kBACPC,IAAI,IAAK,kBACTQ,SAAS,4BACZO,WAAYnB,EAAAA,KACTG,IAAI,EAAG,0BACPC,IAAI,GAAI,wBACRQ,SAAS,6BAEdQ,MAAOpB,EAAAA,KAAaC,MAAM,CACxBoB,GAAIrB,EAAAA,KAAaC,MAAM,CACrBqB,QAAStB,EAAAA,KACNG,IAAI,EAAG,oBACPS,SAAS,0BACZW,eAAgBvB,EAAAA,KACbG,IAAI,EAAG,oBACPS,SAAS,kCACZY,KAAMxB,EAAAA,KACHG,IAAI,EAAG,0BACPS,SAAS,uBACZa,wBAAyBzB,EAAAA,KACtBG,IAAI,EAAG,0BACPS,SAAS,yCACZc,OAAQ1B,EAAAA,KACL2B,MAAM,CAAC,QAAS,SAAU,QAAS,aAExCC,QAAS5B,EAAAA,KAAaC,MAAM,CAC1BqB,QAAStB,EAAAA,KACNG,IAAI,EAAG,oBACPS,SAAS,+BACZiB,SAAU7B,EAAAA,KACPG,IAAI,EAAG,0BACPS,SAAS,gCACZc,OAAQ1B,EAAAA,KACL2B,MAAM,CAAC,QAAS,SAAU,QAAS,eAG1CG,OAAQ9B,EAAAA,KACL+B,GACC/B,EAAAA,KAAaC,MAAM,CACjB+B,KAAMhC,EAAAA,KACH2B,MAAM,CAAC,aACPf,SAAS,oBACZV,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRQ,SAAS,aACZqB,SAAUjC,EAAAA,KACPkC,UACA/B,IAAI,GACJS,SAAS,wBACZuB,YAAanC,EAAAA,KACVG,IAAI,EAAG,oBACPS,SAAS,2BACZwB,SAAUpC,EAAAA,KACPG,IAAI,EAAG,oBACPkC,KACC,OACA,CACEC,GAAI,WACJC,KAAMvC,EAAAA,KAAaY,SAAS,0BAGlC4B,OAAQxC,EAAAA,KACLG,IAAI,EAAG,oBACPkC,KACC,OACA,CACEC,GAAI,WACJC,KAAMvC,EAAAA,KAAaY,SAAS,6BAuDpC6B,GAhDgBzC,EAAAA,KAAaC,MAAM,CACvCyC,eAAgB1C,EAAAA,KAAY+B,GAC1B/B,EAAAA,KAAaC,MAAM,CACjBC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,OACHK,KAAMV,EAAAA,KACN2C,QAAS5C,EACT6C,eAAgB5C,EAAAA,KAAaG,IAAI,GAAGS,SAAS,+BAC7CiC,WAAY7C,EAAAA,KAAY+B,GAAGhC,GAC3B+C,iBAAkB9C,EAAAA,KACfkC,UACA/B,IAAI,EAAG,iDACV4C,kBAAmB/C,EAAAA,KAAY+B,GAC7B/B,EAAAA,KACGG,IAAI,IAET6C,QAAShD,EAAAA,KAAaC,MAAM,CAC1Ba,YAAad,EAAAA,KACVG,IAAI,EAAG,iBACPC,IAAI,GAAI,iBACRQ,SAAS,2BACZG,eAAgBf,EAAAA,KACbG,IAAI,EAAG,iBACPC,IAAI,GAAI,iBACRQ,SAAS,+BACZI,aAAchB,EAAAA,KACXG,IAAI,EAAG,2BACPC,IAAI,EAAG,2BACPQ,SAAS,4BACZK,QAASjB,EAAAA,KACNG,IAAI,EAAG,iBACPC,IAAI,GAAI,iBACRQ,SAAS,uBACZM,YAAalB,EAAAA,KACVG,IAAI,EAAG,kBACPC,IAAI,IAAK,kBACTQ,SAAS,4BACZO,WAAYnB,EAAAA,KACTG,IAAI,EAAG,0BACPC,IAAI,GAAI,wBACRQ,SAAS,kCAMK,CAACqC,EAAeC,EAAQC,KAC/C,MAAMC,GAAOC,EAAAA,EAAAA,IAAY,IACpBJ,EAAczC,MACjB8C,MAAO,IAAIC,KAAKN,EAAczC,MAAM8C,SAEhC9C,GAAQgD,EAAAA,EAAAA,IAAeJ,EAAKK,KAAML,EAAKM,MACvCC,GAAOC,EAAAA,EAAAA,IAAapD,EAAMqD,UAAWX,EAAQC,GAGnD,MAAO,CAACQ,GAFIG,EAAAA,EAAAA,IAAgBH,IACdI,EAAAA,EAAAA,IAAuBJ,GACZ,GAGrBK,EAA4BtB,GAAmBA,EAAeuB,KAAKC,IAAa,IACjFA,EACHrB,WAAYqB,EAAcrB,WAAWoB,KAAKE,GAAcA,EAAUC,SAG9DC,EAAsB,CAAC3B,EAAgBiB,EAAMW,KACjD,MAAMC,EAAY,GAalB,OAZA7B,EAAe8B,SAASN,IACtBA,EAAcrB,WAAW2B,SAASL,IAChCI,EAAUE,MAAKC,EAAAA,EAAAA,IAAgBP,EAAWD,EAAcE,IAAI,GAC5D,IAEJG,EAAUC,SAASG,IACjBA,EAASC,WAAYC,EAAAA,EAAAA,IAAsBF,EAASG,OAAQnB,GAC5DgB,EAASI,YAAc,CACrBC,eAAeC,EAAAA,EAAAA,IAAiBN,EAASG,OAAOI,KAAKpD,OAAQ6B,GAC7DwB,YAAYC,EAAAA,EAAAA,IAAiBT,EAAUL,EAAKX,GAC7C,IAEIY,CAAS,EA2BZc,EAAsB,CAAC1B,EAAMW,EAAK5B,EAAgB6B,KACtD,MAAMe,EAzBuB5C,KAC7B,MAAM4C,EAAc,GAoBpB,OAnBA5C,EAAe8B,SAASN,IACtB,IAAIqB,EAECA,EADArB,EAAcnB,kBACJmB,EAAcnB,mBADmByC,EAAAA,EAAAA,IAAgBtB,EAAcpB,iBAAkBoB,EAAcrB,WAAWK,QAEzH,MAAMuC,GAASC,EAAAA,EAAAA,IAAexB,EAAcrB,WAAWK,OAAQqC,GACzDvC,GAAU2C,EAAAA,EAAAA,IAAWzB,EAAclB,QAASyC,GAClDvB,EAAcrB,WAAW2B,SAAQ,CAACL,EAAWyB,KAC3C,GAAK5C,EAAQ4C,GACb,OAAO5C,EAAQ4C,GAAOpB,SAASqB,IAC7BP,EAAYb,MAAKqB,EAAAA,EAAAA,IACd,eAAcF,EAAQ,IACvBzB,EAAU3D,MACVqF,EACA3B,GACA,GACF,GACF,IAGGoB,CAAW,EAIES,CAAsBrD,GACpCsD,EAAQ,GAYd,OAXAV,EAAYd,SAASyB,IACnBA,EAAWrB,WAAYC,EAAAA,EAAAA,IAAsBoB,EAAWnB,OAAQnB,GAChE,MAAMuC,GAAWC,EAAAA,EAAAA,IAASF,EAAY1B,EAAU6B,QAAQC,GAAMA,EAAEnC,gBAAkB+B,EAAW/B,gBAAgBP,GAC7GsC,EAAWlB,YAAc,CACvBC,eAAesB,EAAAA,EAAAA,IAAcJ,EAAUvC,GACvCwB,YAAYC,EAAAA,EAAAA,IAAiBa,EAAY3B,EAAKX,IAEhDsC,EAAWlB,YAAYwB,SAAUC,EAAAA,EAAAA,IAAWP,EAAYC,EAAUvC,GAClEsC,EAAWlB,YAAY0B,aAAcC,EAAAA,EAAAA,IAAgBT,EAAYtC,GACjEqC,EAAMvB,QAAQyB,EAAS,IAElB,CAACZ,EAAaU,EAAM,EAGvBW,EAAoB,CAACpC,EAAWZ,EAAMqC,KAC1CzB,EAAUC,SAASG,IACjBA,EAASI,YAAYwB,SAAUC,EAAAA,EAAAA,IAAW7B,EAAUqB,EAAOrC,GAC3DgB,EAASI,YAAc,IAClBJ,EAASI,YACZ0B,aAAaC,EAAAA,EAAAA,IAAgB/B,EAAUhB,GACvCiD,oBAAoBF,EAAAA,EAAAA,IAAgB/B,EAAUhB,GAAM,IAEtD,MAAOkD,EAAgBC,EAAgBC,IAAeC,EAAAA,EAAAA,IAAkBrC,IACjEsC,EAAwBC,IAA4BC,EAAAA,EAAAA,IAAqBxC,GAChFA,EAASyC,QAAU,CACjBP,iBACAC,iBACAC,cACAE,yBACAC,2BACD,GACD,EAGEG,EAAyB,CAAC1D,EAAMjB,EAAgB6B,EAAWe,IAAgB5C,EAAeuB,KAAKC,IACnG,MAAMrB,EAAaqB,EAAcrB,WAAWoB,KAAKG,GAAOG,EAAU+C,MAAM3C,GAAaA,EAASP,KAAOA,MACrG,MAAO,IACFF,EACHqD,YAAY,EACZjC,YAAaA,EAAYc,QAAQH,GAAeA,EAAW/B,gBAAkBA,EAAcE,KAAIH,KAAKgC,GAAeA,EAAW7B,KAC9HW,YAAa,CACX0B,YAAa9C,EAAKM,KAAI,CAACuD,EAAG5B,IAAU/C,EAAW4E,QAAO,CAACC,EAAMC,IAAYD,EAAOC,EAAQ5C,YAAY0B,YAAYb,IAAQ,GAAKrB,EAAUrB,SACvI0D,mBAAoBjD,EAAKM,KAAI,CAACuD,EAAG5B,IAAU/C,EAAW4E,QAAO,CAACC,EAAMC,IAAYD,EAAOC,EAAQ5C,YAAY6B,mBAAmBhB,IAAQ,GAAKrB,EAAUrB,UAEvJkE,QAAS,CAEPN,eAAgBjE,EAAW4E,QAAO,CAACC,EAAMC,IAAYD,EAAOC,EAAQP,QAAQN,gBAAgB,GAC5FC,YAAalE,EAAW4E,QAAO,CAACC,EAAMC,IAAYD,EAAOC,EAAQP,QAAQL,aAAa,GACtFE,uBAAwBpE,EAAW4E,QAAO,CAACC,EAAMC,KAC/C,MAAMtB,EAAIsB,EAAQP,QAAQH,uBAC1B,OAAOS,EAAOrB,EAAIqB,EAAOrB,CAAC,GACzBxD,EAAW,GAAGuE,QAAQH,wBACzBC,yBAA0BrE,EAAW4E,QAAO,CAACC,EAAMC,KACjD,MAAMtB,EAAIsB,EAAQP,QAAQF,yBAC1B,OAAOQ,EAAOrB,EAAIqB,EAAOrB,CAAC,GACzBxD,EAAW,GAAGuE,QAAQF,2BAE5B,4HCrS4C,WAE/C,MAAMU,EAAa,CACjBC,QAAS,CACP3H,KAAM,MACN4H,WAAY,GAEdC,SAAU,CACR7H,KAAM,OACN4H,WAAY,GAEdE,WAAY,CACV9H,KAAM,eACN4H,WAAY,KAEdG,SAAU,CACR/H,KAAM,WACN4H,WAAY,IAIVI,EAAoB,CACxB9G,MAAO,CACLC,GAAI,CACFC,QAAS,IACTC,eAAgB,MAChBC,KAAM,MACNC,wBAAyB,KAE3BG,QAAS,CACPN,QAAS,IACTO,SAAU,QAGdC,OAAQ,CACN,CACE5B,KAAM,UACNkC,SAAU,KACVI,OAAQ,KACRL,YAAa,IACbH,KAAM,iBAsBZ,SAASmG,EAAiBC,EAAMC,EAAQ1E,GACtC,MAAMnB,EAAS8F,OAAOF,EAAK5F,QACrBJ,EAAmC,IAAxBkG,OAAOF,EAAKhG,UACvBmG,GAAYF,EAAUjG,EAAWI,GAAWA,EAC5CgG,EAAcC,KAAKC,MAAOC,EAAAA,GAAaN,EAAU7F,GACvD,OAAOoG,MAAMC,KAAK,CAAE3F,OAAQsF,IAAe,CAACM,EAAOlD,KACjD,MAAMmD,EAAQpF,EAAKqF,UAAaT,GAAY3C,EAAQ,GAAOxD,EAAWwD,EACtE,MAAO,CACLmD,QACAE,IAAKF,EAAQ3G,EACd,GAEL,CAEA,SAASsC,EAAgBP,EAAWD,EAAeqD,GAAa,GAC9D,MAAMnE,GAAOC,EAAAA,EAAAA,IAAY,IACpBc,EAAU3D,MACb8C,MAAO,IAAIC,KAAKY,EAAU3D,MAAM8C,SAG5B9C,GAAQgD,EAAAA,EAAAA,IAAeJ,EAAKK,KAAML,EAAKM,MAC7C,KACEwF,EAAAA,EAAAA,IAAe,CAAE1I,SAAS,IAAI+C,KAKhC,CAJE,MAAO4F,GACP,MAAMC,EAAS,8CAA6CjF,EAAU3D,MAAMC,QAC1E8G,EAAa,iDAAmD,oEAClE,MAAM,IAAI8B,MAAMD,EAClB,CAEA5I,EAAM6H,OAAU,EAAII,KAAKa,GAAK,GAAK,IAAQ9I,EAAM+I,GAEjD,MAAMlI,EAAK,CACTkF,QAASqB,EACTtG,QAAS6C,EAAU/C,MAAMC,GAAGC,QAC5BC,eAAgB4C,EAAU/C,MAAMC,GAAGE,eACnCC,KAAM2C,EAAU/C,MAAMC,GAAGG,MAGrBI,EAAU,CACdN,QAAS6C,EAAU/C,MAAMQ,QAAQN,QACjCO,SAAUsC,EAAU/C,MAAMQ,QAAQC,UAG9BC,EAASqC,EAAUrC,OAAOmC,KAAKmE,IAAI,CACvClI,KAAMkI,EAAKlI,KACX8B,KAAMoG,EAAKpG,KACXC,SAAUmG,EAAKnG,SACfE,YAAamG,OAAOF,EAAKjG,aACzBC,SAAmC,IAAxBkG,OAAOF,EAAKhG,WAAqB,KAC5CI,OAAQ8F,OAAOF,EAAK5F,SAAW,KAC/BgH,UAAyB,aAAdpB,EAAKpG,KAAsBmG,EAAiBC,EAAM5H,EAAM6H,OAAQ7H,EAAMqD,WAAa,SAGhG/B,EAAO2H,QAAQ,CACbvJ,KAAM,gBACN8B,KAAM,gBACNG,YAAagC,EAAU/C,MAAMC,GAAGI,0BAElC,MAAMiI,EA3ER,SAA+BrI,EAAIS,EAAQF,GACzC,MAAM,KAAEJ,EAAI,QAAEF,EAAO,eAAEC,GAAmBF,EACpCsI,EAAmB,GAYzB,OAXAC,OAAOC,QAAQxI,EAAGkF,SAAS/B,SAASsF,IAClC,MACMC,EADUxI,EAAiBuI,EAAS,GAAGhC,WAAatG,EAChCF,EACpB0I,EAAe,GACrBlI,EAAO0C,SAAS4D,IACd,MACM6B,GADWF,EAAU3B,EAAKjG,aACFP,EAAQN,QACtC0I,EAAavF,KAAKwF,EAAW,IAE/BN,EAAiBG,EAAS,GAAG5J,MAAQ8J,CAAY,IAE5CL,CACT,CA4DwBO,CAAsB7I,EAAIS,EAAQF,GACxD,MAAO,CACL1B,KAAMiE,EAAUjE,KAChBI,MAAO6D,EAAU7D,MACjB4D,gBACAE,GAAID,EAAUC,GACdU,OAAQ,CACNtE,QACAoB,UACAP,KACA6D,KAAM,CACJwE,gBACA5H,WAGJyF,aAEJ,CAEA,SAASzB,EAAqB5F,EAAMM,EAAOwC,EAASkB,GAClD,MAAMiG,EAAW,IAAK3J,GAWtB,OAVAoJ,OAAOC,QAAQ7G,GAASwB,SAASqB,IAC/BsE,EAAStE,EAAO,IAAMrF,EAAMqF,EAAO,IAAMyC,OAAOzC,EAAO,GAAG,IASrDnB,EAPS,IACXwD,EACHhI,OACAI,MAAO4D,EAAckG,gBACrBhG,IAAIiG,EAAAA,EAAAA,KACJ7J,MAAO2J,GAEuBjG,EAAcE,IAAI,EACpD,CAEA,SAASoB,EAAgB1C,EAAkBwH,GACzC,MAAMC,EAAQD,EAAiBxH,EAC/B,OAAO8F,MAAMC,KAAK,CAAE3F,OAAQJ,IAAoB,CAAC0H,EAAGC,IAAMhC,KAAKC,MAAM6B,EAAQE,IAC/E,CAEA,SAAS/E,EAAe4E,EAAgB/E,GACtC,OAAOqD,MAAMC,KACX,CAAE3F,OAAQoH,IACV,CAACE,EAAGC,IAAMlF,EAAQa,QAAQR,GAAU0C,OAAO1C,KAAW6E,IAAGvH,QA0B7D,CAEA,SAASyC,EAAW3C,EAASyC,GAC3B,OAAOA,EAAOxB,KAAKyG,IACjB,GAAc,IAAVA,EAAa,OAAO,KACxB,GAAc,IAAVA,EAAa,MAAO,CAAC1H,GACzB,GAAI0H,EAAQ,EAAG,CACb,IAAIC,EAAa,EACjB,OAAO/B,MAAMC,KAAK,CAAE3F,OAAQwH,IAAS,CAACF,EAAG5E,KACnCA,EAAQ,GAAM,IAAG+E,GAAc,GACnC,MAAMC,EAAa,CAAC,EAIpB,OAHAhB,OAAOC,QAAQ7G,GAASwB,SAASqB,IAC/B+E,EAAW/E,EAAO,IAAMA,EAAO,GAAK8E,IAAc,IAAW/E,CAAM,IAE9DgF,CAAU,GAErB,IAEJ,4MC3MA,SAAShH,EAAaiH,EAAS3H,EAAQC,GACrC,MAAM2H,EAAmBD,EAAQE,UAC3BC,EAAO9H,EAASC,EACtB,OAAOyF,MAAMC,KAAK,CAAE3F,OAAQC,IAAU,CAAC2F,EAAOlD,IAC/BkF,EAAmBlF,EAAQoF,GAG5C,CAEA,SAASnG,EAAsBV,EAAW8G,GACxC,MAAMC,EAAI,GACJC,EAAI,GACJC,EAAI,GASV,OAPAH,EAAUzG,SAASb,IACjB,MAAM0H,GAAMnC,EAAAA,EAAAA,IAAe/E,EAAW,IAAIZ,KAAKI,IAC/CuH,EAAEzG,KAAK4G,EAAIH,GACXC,EAAE1G,KAAK4G,EAAIF,GACXC,EAAE3G,KAAK4G,EAAID,EAAE,IAGR,CACLF,IACAC,IACAC,IAEJ,CAEA,SAAStH,EAAgBmH,GACvB,MAAMC,EAAI,GACJC,EAAI,GACJC,EAAI,GASV,OAPAH,EAAUzG,SAASb,IACjB,MAAM0H,GAAMC,EAAAA,EAAAA,IAAe,IAAI/H,KAAKI,IACpCuH,EAAEzG,KAAK4G,EAAIH,GACXC,EAAE1G,KAAK4G,EAAIF,GACXC,EAAE3G,KAAK4G,EAAID,EAAE,IAGR,CACLF,IACAC,IACAC,IAEJ,CAEA,SAASrH,EAAuBkH,GAC9B,OAAOA,EAAUhH,KAAKN,IAAS4H,EAAAA,EAAAA,IAAsB5H,IACvD,CAEA,SAASyB,EAAiBjB,EAAWG,EAAK2G,GACxC,OAAOA,EAAUhH,KAAI,CAACN,EAAMiC,KAC1B,MAAM4F,EAAc,CAClBN,EAAG/G,EAAUS,UAAUsG,EAAEtF,GACzBuF,EAAGhH,EAAUS,UAAUuG,EAAEvF,GACzBwF,EAAGjH,EAAUS,UAAUwG,EAAExF,IAGrB6F,EAAc,CAClBP,EAAG5G,EAAI4G,EAAEtF,GACTuF,EAAG7G,EAAI6G,EAAEvF,GACTwF,EAAG9G,EAAI8G,EAAExF,IAEX,OAAOT,EAAAA,EAAAA,IAAWqG,EAAaC,EAAY,GAE/C,CAEA,SAASxG,EAAiBnD,EAAQmJ,GAChC,OAAOA,EAAUhH,KAAKN,IACpB,IAAI+H,EAAc,EAWlB,OAVA5J,EAAO0C,SAAQ,CAAC4D,EAAMxC,KACF,kBAAdwC,EAAKpG,MACToG,EAAKoB,UAAUhF,SAASmH,IACjBhI,GAAQgI,EAAM5C,OAAWpF,GAAQgI,EAAM1C,MACtB,IAAhByC,GAAsBtD,EAAKnG,SAAWH,EAAO4J,GAAazJ,YAC5DyJ,EAAc9F,EAElB,GACA,IAEG8F,CAAW,GAEtB,CAEA,SAASvF,EAASF,EAAY1B,EAAW0G,GACvC,OAAO1G,EAAUN,KAAKU,IACpB,MAAMiH,EAAY,GAAE3F,EAAW/F,UAAUyE,EAASzE,OAC5C2L,EAAYZ,EAAUhH,KAAI,CAACN,EAAMiC,KACrC,MAAMkG,EAAqB,CACzBZ,EAAGjF,EAAWrB,UAAUsG,EAAEtF,GAC1BuF,EAAGlF,EAAWrB,UAAUuG,EAAEvF,GAC1BwF,EAAGnF,EAAWrB,UAAUwG,EAAExF,IAEtBmG,EAAmB,CACvBb,EAAGvG,EAASC,UAAUsG,EAAEtF,GACxBuF,EAAGxG,EAASC,UAAUuG,EAAEvF,GACxBwF,EAAGzG,EAASC,UAAUwG,EAAExF,IAE1B,OAAOoG,EAAAA,EAAAA,IAAYF,EAAoBC,EAAiB,IAEpDE,EAAYJ,EAAU5H,KAAKiI,GAC1BA,EAAWC,EAAAA,YAAeC,EAAAA,KAGjC,MAAO,CACLlM,KAAM0L,EACNC,YACAI,YACAI,WAAY1H,EAASP,GACrBkI,aAAcrG,EAAW7B,GACzBA,IAAIiG,EAAAA,EAAAA,KACL,GAEL,CAEA,SAAS/D,EAAcN,EAAOiF,GAC5B,OAAOA,EAAUhH,KAAI,CAACN,EAAMiC,IAAWI,EAAMyB,QAAO,CAACC,EAAMC,IAAYA,EAAQsE,UAAUrG,IAAU8B,IAAM,GAAS,EAAI,GACxH,CAmBA,SAASlB,EAAWrC,EAAW6B,EAAOiF,GACpC,OAAOA,EAAUhH,KAAI,CAACN,EAAMiC,IAlB9B,SAAmBzB,EAAW6B,EAAOJ,GACnC,IAAI2G,EAGFA,IAFEvG,GACeA,EAAMI,QAAQoG,GAAMA,EAAEH,aAAelI,EAAUC,KAC7CqD,QAAO,CAACC,EAAMC,IAAYA,EAAQsE,UAAUrG,IAAU8B,IAAM,GAKjF,MAAM+E,GAAUtI,EAAUY,YAAYI,WAAWS,GAEjD,OAAK6G,GAAUF,EAAgB,OAC3BE,GAAUF,EAAgB,eACzBE,GAAWF,EACZE,IAAWF,EAAgB,WAA/B,EADgC,UAElC,CAGwCG,CAAUvI,EAAW6B,EAAOJ,IACpE,CAEA,SAASc,EAAgBvC,EAAW8G,EAAW0B,GAAW,GACxD,MAAMC,EAAUjE,EAAAA,GAAa,KAAoBsC,EAAU/H,OAC3D,IAAIuD,EAAc,EAClB,OAAOwE,EAAUhH,KAAI,CAACN,EAAMiC,KAC1B,IAAIiH,EAAS1I,EAAUY,YAAYwB,QAAQX,GAM3C,OALiB,IAAb+G,IACa,iBAAXE,IAA2BA,EAAS,OACzB,SAAXA,IAAmBA,EAAS,aAElCpG,GAAcqG,EAAAA,EAAAA,IAAe3I,EAAUW,OAAQX,EAAUY,YAAYC,cAAcY,GAAQiH,EAAQpG,EAAamG,GAC5GnG,EAAc,EAAU,EACxBA,EAAc,EAAU,EACrBA,CAAW,GAEtB,CAEA,SAASO,EAAkB7C,GACzB,IAAI4C,EAAc,EAClB,MAAMgG,EAAoB5I,EAAUY,YAAYwB,QAAQkB,QAAO,CAACC,EAAMmF,EAAQpC,KAC5E,MAAMiB,EAAcvH,EAAUY,YAAYC,cAAcyF,GAExD,OADmBuC,EAAAA,EAAAA,IAAc7I,EAAUW,OAAQ+H,EAAQnB,GACvChE,CAAI,GACvB,GACGuF,EAAsB9I,EAAUY,YAAYwB,QAAQkB,QAAO,CAACC,EAAMmF,EAAQpC,KAC9E,MAAMiB,EAAcvH,EAAUY,YAAYC,cAAcyF,GAClDR,GAAa+C,EAAAA,EAAAA,IAAc7I,EAAUW,OAAQ+H,EAAQnB,GAC3D,OAAIzB,EAAa,EAAUA,EAAavC,EACjCA,CAAI,GACV,GACGwF,EAAsB/I,EAAUY,YAAYwB,QAAQkB,QAAO,CAACC,EAAMmF,EAAQpC,KAC9E,MAAMiB,EAAcvH,EAAUY,YAAYC,cAAcyF,GACxD,IAAI0C,EAAgBN,EASpB,MARe,iBAAXA,GACFM,EAAgB,MAChBpG,GAAe,GACK,SAAX8F,IACT9F,GAAe,EACfoG,EAAgB,aAEQH,EAAAA,EAAAA,IAAc7I,EAAUW,OAAQqI,EAAezB,GAC9ChE,CAAI,GAC9B,GACGvE,EAASgB,EAAUY,YAAYwB,QAAQrD,OACvCkK,EAAczE,EAAAA,GAAa,KAAoBxF,EAC/C0D,EAAiB4B,KAAK4E,IAAIJ,EAAsBG,GAChDtG,GAAkBiG,EAAoBG,GAAuBE,EAEnE,OADArG,EAAgBA,EAAc5D,EAAUwF,EAAAA,GAAU,IAC3C,CAAC9B,EAAgBC,EAAgBC,EAC1C,CAEA,SAASI,EAAqBhD,GAG5B,MAAO,CAFaA,EAAUY,YAAY0B,YAAYgB,QAAO,CAACC,EAAMC,IAAaA,EAAUD,EAAOC,EAAUD,GAAO,GAC7FvD,EAAUY,YAAY6B,mBAAmBa,QAAO,CAACC,EAAMC,IAAaA,EAAUD,EAAOC,EAAUD,GAAO,GAE9H,EArM8D,kECL1C,WAEpB4F,UAAY,SAAUC,GACpBC,QAAQC,IAAIC,EAAAA,IACZ,MAAM,IAAEC,GAAQJ,EAAMK,KACtBC,YAAY,CAAEC,MAAM,EAAOC,QAAS,gCACpC,MAAOpK,EAAMW,EAAK0J,IAASvL,EAAAA,EAAAA,IACzBkL,EAAIjL,eAAe,GAAGG,WAAW,GACjC8F,EAAAA,GACA+E,EAAAA,IAEFG,YAAY,CAAEC,MAAM,EAAOC,QAAS,gCACpC,IAAIrL,GAAiBsB,EAAAA,EAAAA,IAAyB2J,EAAIjL,gBAClD,MAAM6B,GAAYF,EAAAA,EAAAA,IAAoBsJ,EAAIjL,eAAgBiB,EAAMW,GAChEuJ,YAAY,CAAEC,MAAM,EAAOC,QAAS,6BACpC,MAAOzI,EAAaU,IAASX,EAAAA,EAAAA,IAC3B1B,EACAW,EACAqJ,EAAIjL,eACJ6B,EACAoJ,EAAI3K,SAEN6K,YAAY,CAAEC,MAAM,EAAOC,QAAS,8BACpCpH,EAAAA,EAAAA,IAAkBpC,EAAWZ,EAAMqC,GACnCtD,GAAiB2E,EAAAA,EAAAA,IAAuB1D,EAAMjB,EAAgB6B,EAAWe,GAczEuI,YAAY,CAAEC,MAAM,EAAMG,QAbV,CACdC,SAAS,EACTvK,OACAd,WAAY,CACV0B,YACAe,eAEF5C,iBACAsD,QACA1B,MACA0J,UAIJ,6IC6CA,SAAS3K,EAAY8K,GACnB,MAAM,MACJ7K,EAAK,cACL3C,EAAa,MACbE,EAAK,YACLC,EAAW,eACXC,EAAc,aACdC,EAAY,QACZC,EAAO,YACPC,EAAW,WACXC,GACEgN,EACJ,IAAIC,EAAUC,OAAO/K,EAAMgL,WACvBF,EAAU,MAAKA,EAAUA,EAAQG,UAAU,IAE/C,IAAIC,GA1BgBC,EA0BQnL,GAxBzBC,KAAKmL,IAAID,EAAKE,cAAeF,EAAKG,WAAYH,EAAKI,WAChDtL,KAAKmL,IAAID,EAAKE,cAAe,EAAG,IAClC,GACA,GACA,GACA,KAPN,IAAsBF,EA2BhBD,EAAW,MAAKA,EAAY,IAAGA,KAEnC,MAAMM,EAAgBT,QAElB/K,EAAMyL,WAAa,GACjBzL,EAAM0L,aAAe,KACrB1L,EAAM2L,aAAe,OACvBC,QAAQ,IACVX,UAAU,GAEZ,IAAIY,EAAsBd,OACxB/F,OAAO3H,GAAeuO,QAAQ,IAC9BX,UAAU,GACR5N,EAAgB,IAAKwO,EAAuB,IAAGA,EAAoBZ,UAAU,MAC7E5N,GAAiB,IAAKwO,EAAuB,IAAGA,KAEpD,IAAIC,EAAYf,OAAO/F,OAAOzH,GAAOwO,cAAc,IAChDC,MAAM,KACNC,KAAK,IACLhB,UAAU,EAAG,GACZ1N,GAAS,IAAGuO,EAAa,IAAGA,EAAUb,UAAU,EAAG,MACvD,IAAIiB,EAAW,EACUA,EAAH,IAAlBlH,OAAOzH,GAAyB4H,KAAKgH,KAAKhH,KAAKiH,MAAMjH,KAAK4E,IAAIxM,KAClD,KAEhB,MAAM4C,EAAQ,qBAAoB2K,IAAUI,IAAWM,KAAiBK,cAAgCC,IAAYI,YAC9GG,EAAoBtB,OAAO/F,OAAOxH,GAAaoO,QAAQ,IAGvDU,EAAuBvB,OAAO/F,OAAOvH,GAAgBmO,QAAQ,IAG7DW,EAAqBxB,OACzB/F,OAAOtH,GAAckO,QAAQ,IAC7BX,UAAU,EAAG,GACf,IAAIuB,EAAgBzB,OAAO/F,OAAOrH,GAASiO,QAAQ,IAC/CjO,EAAU,MAAK6O,EAAiB,IAAGA,KAEvC,MAAMC,EAAoB1B,OAAO/F,OAAOpH,GAAagO,QAAQ,IAGvDc,EAAmB3B,OAAO/F,OAAOnH,GAAY8O,YAAY,IAG/D,MAAO,CACLxM,OACAC,KAJY,WAAUiM,EAAkBO,SAAS,MAAMN,EAAqBM,SAAS,MAAML,KAAsBC,EAAcI,SAAS,MAAMH,KAAqBC,EAAiBE,SAAS,YAMjM,CAEA,SAAS1M,EAAe2M,EAAUC,GAChC,MACMC,EAAS,MAAU,EAAMC,EAAAA,IAC/B,IAAIC,EAAO,EAEX,MAAMC,EAAS,CACfA,MAAe,GAEfA,EAAOC,OAASN,EAAS5B,UAAU,EAAG,GAEtCiC,EAAOE,QAAUC,SAASR,EAAS5B,UAAU,GAAI,IAAK,IACtDiC,EAAOI,UAAYC,WAAWV,EAAS5B,UAAU,GAAI,KACrDiC,EAAOM,KAAOD,WAAWV,EAAS5B,UAAU,GAAI,KAChDiC,EAAOO,MAAQF,WACZ,IAAGF,SACFR,EAAS5B,UAAU,GAAI,IACvB,OACG4B,EAAS5B,UAAU,GAAI,OAE9BiC,EAAO3P,MAAQgQ,WACZ,GAAEV,EAAS5B,UAAU,GAAI,OAAOoC,SAC/BR,EAAS5B,UAAU,GAAI,IACvB,OACG4B,EAAS5B,UAAU,GAAI,OAG9BiC,EAAOQ,MAAQH,WAAWT,EAAS7B,UAAU,EAAG,KAChDiC,EAAOS,MAAQJ,WAAWT,EAAS7B,UAAU,GAAI,KACjDiC,EAAOU,KAAOL,WAAY,IAAGT,EAAS7B,UAAU,GAAI,OACpDiC,EAAOW,MAAQN,WAAWT,EAAS7B,UAAU,GAAI,KACjDiC,EAAOY,GAAKP,WAAWT,EAAS7B,UAAU,GAAI,KAC9CiC,EAAOjH,GAAKsH,WAAWT,EAAS7B,UAAU,GAAI,KAE9CiC,EAAOa,MAAQb,EAAOjH,GACtBiH,EAAOjH,IAAM8G,EAKbG,EAAOc,GAAKd,EAAOjH,GAAKgI,EAAAA,UAAY,EAAM,GAC1Cf,EAAOgB,QAAUhB,EAAOM,KACxBN,EAAOM,MAAiB,KAATT,EACfG,EAAOO,OAAkB,KAATV,EAAkB,KAGlCG,EAAOiB,SAAWjB,EAAOQ,MACzBR,EAAOQ,OAASU,EAAAA,QAChBlB,EAAOmB,SAAWnB,EAAOS,MACzBT,EAAOS,OAASS,EAAAA,QAChBlB,EAAOoB,SAAWpB,EAAOW,MACzBX,EAAOW,OAASO,EAAAA,QAChBlB,EAAOqB,MAAQrB,EAAOY,GACtBZ,EAAOY,IAAMM,EAAAA,QAEblB,EAAOsB,KAAOtB,EAAOc,GAAK,EAAMd,EAAOU,MAAQ,EAC/CV,EAAOuB,KAAOvB,EAAOc,GAAK,EAAMd,EAAOU,MAAQ,EAY7CX,EADEC,EAAOE,QAAU,GACZF,EAAOE,QAAU,IAEjBF,EAAOE,QAAU,KAG1B,MAAMsB,GAAcC,EAAAA,EAAAA,YAAW1B,EAAMC,EAAOI,YAEtC,IACJsB,EAAG,IAAEC,EAAG,GAAEC,EAAE,OAAEC,EAAM,IAAEC,GACpBN,EAqBJ,OApBAxB,EAAO+B,YAAaC,EAAAA,EAAAA,MAAKjC,EAAM2B,EAAKC,EAAKC,EAAIC,EAAQC,GACrD9B,EAAO3M,UAAY,IAAIN,KAAKgN,EAAM2B,EAAKC,EAAKC,EAAIC,EAAQC,GACxD9B,EAAOiC,mBAAqB,IAAIlP,KAC9BiN,EAAO3M,UAAUkH,UAAmD,IAAvCyF,EAAO3M,UAAU6O,qBAC9CC,cAAcpE,UAAU,EAAG,KAG7BqE,EAAAA,EAAAA,GAASpC,EAAQ,CACfqC,QApFc,IAqFdC,KAAMtC,EAAOC,OACbnN,MAAOkN,EAAO+B,WAAa,UAC3BQ,OAAQvC,EAAO3P,MACfmS,MAAOxC,EAAOU,KACd+B,OAAQzC,EAAOW,MACf+B,OAAQ1C,EAAOQ,MACfmC,IAAK3C,EAAOY,GACZgC,IAAK5C,EAAOjH,GACZ8J,OAAQ7C,EAAOS,QAGVT,CACT,CAuEA,SAAStH,EAAe/E,EAAWR,GACjC,MAAM0H,EAVR,SAA4BlH,EAAWsK,GAMrC,MAZgB,CAChBvD,GADeV,EAOU8I,EAAAA,GACvBnP,EAAU3D,MACViO,GAEmC8E,UAVhCrI,EAAIiB,EAAAA,YACThB,EAAGX,EAAEY,EAAIe,EAAAA,YACTf,GAAIZ,EAAEW,EAAIgB,EAAAA,aAHK3B,KAajB,CAGcgJ,CAAmBrP,EAAWR,GAC1C,MAAO,CAAEuH,EAAGG,EAAIH,EAAGC,EAAGE,EAAIF,EAAGC,EAAGC,EAAID,EACtC,CAEA,SAASE,EAAe3H,GACtB,MAAM8P,EAAI9P,EAAKoH,UAAY,MAAW,QAAU,QAChD,IAAI2I,EAAI,WAAa,eAAkBD,EACnCC,EAAI,EAAIjL,KAAKa,KAAIoK,GAAK,EAAIjL,KAAKa,IACnC,IAAIqK,EAAI,YAAc,eAAkBF,EACpCE,EAAI,EAAIlL,KAAKa,KAAIqK,GAAK,EAAIlL,KAAKa,IACnC,MAAMsK,EAAYF,EAAI,WAAcjL,KAAKoL,IAAIF,GAAK,YAAelL,KAAKoL,IAAIF,GACpEzH,EAAW,QAAU,OAAUzD,KAAKqL,IAAIH,GAAK,MAAUlL,KAAKqL,IAAI,EAAIH,IACvE,YAAcxH,EAAAA,aACX4H,EAAY,UAAa,eAAiBN,EAC1CtI,EAAKe,EAAWzD,KAAKoL,IAAIE,GAAatL,KAAKoL,IAAID,GAKrD,MAAO,CAAE1I,EAHEgB,EAAWzD,KAAKqL,IAAIF,GAGnBzI,IAAGC,GAFHc,EAAWzD,KAAKqL,IAAIC,GAAatL,KAAKoL,IAAID,GAGxD,CAEA,SAASrI,EAAsBkD,GAC7B,MAAMuF,EAAKvF,EAAO,MAAW,QAAU,QACvC,OAAO,EAAIhG,KAAKa,IAAM,cAAiB,kBAAoB0K,EAC7D,CAEA,SAAShI,EAAYiI,EAAWC,GAC9B,MAAM5C,EAAI2C,EAAU/I,EAAIgJ,EAAUhJ,EAC5BsB,EAAIyH,EAAU9I,EAAI+I,EAAU/I,EAC5B9E,EAAI4N,EAAU7I,EAAI8I,EAAU9I,EAElC,OAAO3C,KAAK0L,KAAK7C,EAAIA,EAAI9E,EAAIA,EAAInG,EAAIA,EACvC,EAlVA,mFCnBA,MAAMsC,EAAa,OAGbyD,EAAgB,IAEhBsB,EAAS/E,GAJF,IAGK,gGCDc,WAEhC,MAAMyL,EAAgB,IAAIC,EAAAA,QAAQ,EAAG,EAAG,GAClC5I,EAAc,IAAI4I,EAAAA,QAClB7I,EAAc,IAAI6I,EAAAA,QAClBC,EAAW,IAAID,EAAAA,QACfE,EAAS,IAAIF,EAAAA,QAEnB,SAASlP,EAAWhB,EAAWG,GAC7BmH,EAAY+I,UAAU,CAAClQ,EAAI4G,EAAG5G,EAAI6G,EAAG7G,EAAI8G,IACzCI,EAAYgJ,UAAU,CAACrQ,EAAU+G,EAAG/G,EAAUgH,EAAGhH,EAAUiH,IAE3DkJ,EAASG,WAAWL,EAAe3I,GACnC8I,EAAOE,WAAWjJ,EAAa4I,GAE/B,MAAMM,EAAQJ,EAASK,QAAQJ,GAEzBK,EAAmBnJ,EAAYoJ,WAAWT,GAC1CU,EAAiBrJ,EAAYoJ,WAAWrJ,GAG9C,QAAIkJ,EAFcjM,KAAKsM,MAAM5I,EAAAA,YAAayI,IAEjBE,EAAiBF,EAI5C,CAEA,SAAS5H,EAAclI,EAAQ+H,EAAQnB,GAErC,OADqB5G,EAAOI,KAAKwE,cAAcmD,GAC3BnB,EACtB,CAEA,SAASoB,EACPhI,EACA4G,EACAmB,EACApG,EACAmG,GAEA,MAAM3C,EAAa+C,EAAclI,EAAQ+H,EAAQnB,IAC3C,SAAE7J,GAAaiD,EAAOlD,QAE5B,OAAI6E,GAAe,GAAOwD,GAAc,EAC/B,EAGLxD,GAAe,GAAKwD,GAAc,EAC7B,GAKJxD,EAAc5E,EACZ+K,EAAQ3C,GACTpI,CAER,iBClDA+H,OAAOoL,eAAeC,EAAS,aAAc,CAC3CnM,OAAO,IAETmM,EAAQC,KAAOD,EAAQE,MAAQF,EAAQG,GAAKH,EAAQI,GAAKJ,EAAQK,GAAKL,EAAQ1D,MAAQ0D,EAAQM,UAAYN,EAAQO,IAAMP,EAAQ9I,YAAc8I,EAAQQ,GAAKR,EAAQS,cAAgBT,EAAQU,QAAUV,EAAQvD,QAAUuD,EAAQW,MAAQX,EAAQ3E,QAAK,EACpP,IAAIA,EAAK7H,KAAKa,GACd2L,EAAQ3E,GAAKA,EACb,IAAIsF,EAAa,EAALtF,EACZ2E,EAAQW,MAAQA,EAChB,IAAIlE,EAAUpB,EAAK,IACnB2E,EAAQvD,QAAUA,EAClB,IAAIiE,EAAU,IAAMrF,EACpB2E,EAAQU,QAAUA,EAElBV,EAAQS,cADY,KAIpBT,EAAQQ,GAFC,SAGT,IAAItJ,EAAc,SAElB8I,EAAQ9I,YAAcA,EACtB,IAAIqJ,EAAM,GAAO/M,KAAK0L,KAAKhI,mBAC3B8I,EAAQO,IAAMA,EACd,IAAID,EAAYpJ,EAAcqJ,EAAM,GACpCP,EAAQM,UAAYA,EACpB,IAAIhE,EAAQ,EAAMiE,EAClBP,EAAQ1D,MAAQA,EAEhB0D,EAAQK,GADC,gBAGTL,EAAQI,IADE,cAGVJ,EAAQG,IADE,cAGVH,EAAQE,OADIE,qBAGZJ,EAAQC,KADG,EAAM","sources":["webpack:///./src/Model/mission.js","webpack:///./src/Model/satellite.js","webpack:///./src/Model/simulation.js","webpack:///./src/Model/workers/missionWorker.js","webpack:///./src/Util/astronomy.js","webpack:///./src/Util/constants.js","webpack:///./src/Util/power.js","webpack:///./node_modules/satellite.js/lib/constants.js"],"sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\nimport * as Yup from 'yup';\nimport { generateTLE, twoline2satrec } from '../Util/astronomy';\nimport { FRAMES, SIM_LENGTH } from '../Util/constants';\nimport {\n  createSatellite, createPowerSatellite, getOffsets, getIndexCounts, generateIndices,\n} from './satellite';\nimport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEclipsedArray,\n  getCurrentDuties,\n  getBeams,\n  getBeamDuties,\n  getChargeStates,\n  getDischargeSaved,\n  getEarthRotationAngles,\n  getSources,\n  getLowestChargeState,\n} from './simulation';\n\nconst SatelliteSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .trim(),\n  color: Yup.string()\n    .trim()\n    .matches(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i),\n  orbit: Yup.object().shape({\n    tle: Yup.string(),\n    list: Yup.string(),\n    meanMotionDot: Yup.number()\n      .min(-1, 'Must be more than -1')\n      .max(1, 'Must be less than 1')\n      .required('meanMotionDot is required'),\n    bstar: Yup.number()\n      .min(-2, 'Must be between -2 and 2')\n      .max(2, 'Must be between -2 and 2')\n      .required('bstar is required'),\n    inclination: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('inclination is required'),\n    rightAscension: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('right ascension is required'),\n    eccentricity: Yup.number()\n      .min(0, 'Must be between 0 and 1')\n      .max(1, 'Must be between 0 and 1')\n      .required('eccentricity is required'),\n    perigee: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('perigee is required'),\n    meanAnomaly: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('mean anomaly is required'),\n    meanMotion: Yup.number()\n      .min(0, 'Must be greater than 0')\n      .max(16, 'Must be less than 16')\n      .required('mean motion is required'),\n  }),\n  power: Yup.object().shape({\n    pv: Yup.object().shape({\n      voltage: Yup.number()\n        .min(0, 'Must be positive')\n        .required('pv voltage is required'),\n      currentDensity: Yup.number()\n        .min(0, 'Must be positive')\n        .required('pv current density is required'),\n      area: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('pv area is required'),\n      powerStoringConsumption: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('Power storing consumption is required'),\n      preset: Yup.string()\n        .oneOf(['small', 'medium', 'large', 'custom']),\n    }),\n    battery: Yup.object().shape({\n      voltage: Yup.number()\n        .min(0, 'Must be positive')\n        .required('battery voltage is required'),\n      capacity: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('battery capacity is required'),\n      preset: Yup.string()\n        .oneOf(['small', 'medium', 'large', 'custom']),\n    }),\n  }),\n  duties: Yup.array()\n    .of(\n      Yup.object().shape({\n        type: Yup.string()\n          .oneOf(['cyclical'])\n          .required('Type is required'),\n        name: Yup.string()\n          .min(2, 'Too Short!')\n          .max(30, 'Too Long!')\n          .required('required!'),\n        priority: Yup.number()\n          .integer()\n          .min(1)\n          .required('Priority is required'),\n        consumption: Yup.number()\n          .min(0, 'Must be positive')\n          .required('Consumption is required'),\n        duration: Yup.number()\n          .min(0, 'Must be positive')\n          .when(\n            'type',\n            {\n              is: 'cyclical',\n              then: Yup.number().required('Duration is required'),\n            },\n          ),\n        cycles: Yup.number()\n          .min(0, 'Must be positive')\n          .when(\n            'type',\n            {\n              is: 'cyclical',\n              then: Yup.number().required('Cycles is required'),\n            },\n          ),\n      }),\n    ),\n});\n\nconst MissionSchema = Yup.object().shape({\n  constellations: Yup.array().of(\n    Yup.object().shape({\n      name: Yup.string()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .trim(),\n      list: Yup.string(),\n      payload: SatelliteSchema,\n      satelliteCount: Yup.number().min(0).required('Satellite count is required'),\n      satellites: Yup.array().of(SatelliteSchema),\n      spacePowersCount: Yup.number()\n        .integer()\n        .min(0, 'Must be an integer greater than or equal to 0'),\n      spacePowerIndices: Yup.array().of(\n        Yup.number()\n          .min(0),\n      ),\n      offsets: Yup.object().shape({\n        inclination: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('inclination is required'),\n        rightAscension: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('right ascension is required'),\n        eccentricity: Yup.number()\n          .min(0, 'Must be between 0 and 1')\n          .max(1, 'Must be between 0 and 1')\n          .required('eccentricity is required'),\n        perigee: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('perigee is required'),\n        meanAnomaly: Yup.number()\n          .min(0, 'Must be 0-360°')\n          .max(360, 'Must be 0-360°')\n          .required('mean anomaly is required'),\n        meanMotion: Yup.number()\n          .min(0, 'Must be greater than 0')\n          .max(16, 'Must be less than 16')\n          .required('mean motion is required'),\n      }),\n    }),\n  ),\n});\n\nconst simulateBaseData = (baseSatellite, length, frames) => {\n  const tles = generateTLE({\n    ...baseSatellite.orbit,\n    epoch: new Date(baseSatellite.orbit.epoch),\n  });\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  const time = getTimeArray(orbit.epochdate, length, frames);\n  const sun = getSunPositions(time);\n  const earth = getEarthRotationAngles(time);\n  return [time, sun, earth];\n};\n\nconst initializeConstellations = (constellations) => constellations.map((constellation) => ({\n  ...constellation,\n  satellites: constellation.satellites.map((satellite) => satellite.id),\n}));\n\nconst initializeCustomers = (constellations, time, sun) => {\n  const customers = [];\n  constellations.forEach((constellation) => {\n    constellation.satellites.forEach((satellite) => {\n      customers.push(createSatellite(satellite, constellation.id));\n    });\n  });\n  customers.forEach((customer) => {\n    customer.positions = getSatellitePositions(customer.params, time);\n    customer.performance = {\n      currentDuties: getCurrentDuties(customer.params.load.duties, time),\n      isEclipsed: getEclipsedArray(customer, sun, time),\n    };\n  });\n  return customers;\n};\n\nconst initializeSpacePowers = (constellations) => {\n  const spacePowers = [];\n  constellations.forEach((constellation) => {\n    let indices;\n    if (!constellation.spacePowerIndices) indices = generateIndices(constellation.spacePowersCount, constellation.satellites.length);\n    else indices = constellation.spacePowerIndices;\n    const counts = getIndexCounts(constellation.satellites.length, indices);\n    const offsets = getOffsets(constellation.offsets, counts);\n    constellation.satellites.forEach((satellite, index) => {\n      if (!offsets[index]) return;\n      return offsets[index].forEach((offset) => {\n        spacePowers.push(createPowerSatellite(\n          `Space Power ${index + 1}`,\n          satellite.orbit,\n          offset,\n          constellation,\n        ));\n      });\n    });\n  });\n\n  return spacePowers;\n};\n\nconst simulateSpacePowers = (time, sun, constellations, customers) => {\n  const spacePowers = initializeSpacePowers(constellations);\n  const beams = [];\n  spacePowers.forEach((spacePower) => {\n    spacePower.positions = getSatellitePositions(spacePower.params, time);\n    const satBeams = getBeams(spacePower, customers.filter((c) => c.constellation === spacePower.constellation), time);\n    spacePower.performance = {\n      currentDuties: getBeamDuties(satBeams, time),\n      isEclipsed: getEclipsedArray(spacePower, sun, time),\n    };\n    spacePower.performance.sources = getSources(spacePower, satBeams, time);\n    spacePower.performance.chargeState = getChargeStates(spacePower, time);\n    beams.push(...satBeams);\n  });\n  return [spacePowers, beams];\n};\n\nconst simulateBatteries = (customers, time, beams) => {\n  customers.forEach((customer) => {\n    customer.performance.sources = getSources(customer, beams, time);\n    customer.performance = {\n      ...customer.performance,\n      chargeState: getChargeStates(customer, time),\n      chargeStateNoBeams: getChargeStates(customer, time, false),\n    };\n    const [totalDischarge, dischargeSaved, timeCharged] = getDischargeSaved(customer);\n    const [lowestChargeStateBeams, lowestChargeStateNoBeams] = getLowestChargeState(customer);\n    customer.summary = {\n      totalDischarge,\n      dischargeSaved,\n      timeCharged,\n      lowestChargeStateBeams,\n      lowestChargeStateNoBeams,\n    };\n  });\n};\n\nconst simulateConstellations = (time, constellations, customers, spacePowers) => constellations.map((constellation) => {\n  const satellites = constellation.satellites.map((id) => customers.find((customer) => customer.id === id));\n  return {\n    ...constellation,\n    isCustomer: true,\n    spacePowers: spacePowers.filter((spacePower) => spacePower.constellation === constellation.id).map((spacePower) => spacePower.id),\n    performance: {\n      chargeState: time.map((t, index) => satellites.reduce((prev, current) => prev + current.performance.chargeState[index], 0) / customers.length),\n      chargeStateNoBeams: time.map((t, index) => satellites.reduce((prev, current) => prev + current.performance.chargeStateNoBeams[index], 0) / customers.length),\n    },\n    summary: {\n      // totalDischarge: satellites.reduce((prev, current) => prev + current.summary.totalDischarge, 0),\n      dischargeSaved: satellites.reduce((prev, current) => prev + current.summary.dischargeSaved, 0),\n      timeCharged: satellites.reduce((prev, current) => prev + current.summary.timeCharged, 0),\n      lowestChargeStateBeams: satellites.reduce((prev, current) => {\n        const c = current.summary.lowestChargeStateBeams;\n        return prev < c ? prev : c;\n      }, satellites[0].summary.lowestChargeStateBeams),\n      lowestChargeStateNoBeams: satellites.reduce((prev, current) => {\n        const c = current.summary.lowestChargeStateNoBeams;\n        return prev < c ? prev : c;\n      }, satellites[0].summary.lowestChargeStateNoBeams),\n    },\n  };\n});\n\nconst handleMissionRequest = (req, length = SIM_LENGTH, frames = FRAMES) => {\n  const [time, sun, earth] = simulateBaseData(req.constellations[0].satellites[0], length, frames);\n  let constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  const [spacePowers, beams] = simulateSpacePowers(time, sun, req.constellations, customers);\n  simulateBatteries(customers, time, beams);\n  constellations = simulateConstellations(time, constellations, customers, spacePowers);\n  return {\n    success: true,\n    time,\n    satellites: {\n      customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n    sun,\n    earth,\n  };\n};\n\nconst generatePartialMission = (req, length = SIM_LENGTH, frames = FRAMES) => {\n  const [time, sun, earth] = simulateBaseData(req.constellations[0].satellites[0], length, frames);\n  const constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  return {\n    time,\n    constellations,\n    satellites: {\n      customers,\n    },\n    sun,\n    earth,\n  };\n};\n\nconst handleOptimizerMission = (mission, req) => {\n  const [spacePowers, beams] = simulateSpacePowers(\n    mission.time,\n    mission.sun,\n    req.constellations,\n    mission.satellites.customers,\n  );\n  simulateBatteries(mission.satellites.customers, mission.time, beams);\n  const constellations = simulateConstellations(\n    mission.time,\n    mission.constellations,\n    mission.satellites.customers,\n    spacePowers,\n  );\n  return {\n    ...mission,\n    success: true,\n    satellites: {\n      customers: mission.satellites.customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n  };\n};\n\nexport {\n  handleMissionRequest, simulateBaseData, initializeConstellations, initializeCustomers,\n  simulateSpacePowers, simulateBatteries, simulateConstellations, generatePartialMission,\n  handleOptimizerMission, initializeSpacePowers,\n  MissionSchema,\n};\n","/* eslint-disable array-callback-return */\n/* eslint-disable consistent-return */\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  twoline2satrec,\n  generateTLE,\n  getOrbitAtTime,\n} from '../Util/astronomy';\nimport { SIM_LENGTH } from '../Util/constants';\n\nconst PV_SOURCES = {\n  sunOnly: {\n    name: 'sun',\n    efficiency: 1,\n  },\n  beamOnly: {\n    name: 'beam',\n    efficiency: 1,\n  },\n  sunAndBeam: {\n    name: 'sun and beam',\n    efficiency: 1.5,\n  },\n  eclipsed: {\n    name: 'eclipsed',\n    efficiency: 0,\n  },\n};\n\nconst POWER_SAT_REQUEST = {\n  power: {\n    pv: {\n      voltage: 4.7,\n      currentDensity: 170.5,\n      area: 0.0128,\n      powerStoringConsumption: 1.2,\n    },\n    battery: {\n      voltage: 3.6,\n      capacity: 1.125,\n    },\n  },\n  duties: [\n    {\n      name: 'beaming',\n      duration: null,\n      cycles: null,\n      consumption: 3.2,\n      type: 'space power',\n    },\n  ],\n};\n\nfunction generatePowerProfiles(pv, duties, battery) {\n  const { area, voltage, currentDensity } = pv;\n  const newPowerProfiles = [];\n  Object.entries(pv.sources).forEach((pvSource) => {\n    const current = currentDensity * pvSource[1].efficiency * area;\n    const pvPower = current * voltage;\n    const loadProfiles = [];\n    duties.forEach((duty) => {\n      const netPower = pvPower - duty.consumption;\n      const netCurrent = netPower / battery.voltage;\n      loadProfiles.push(netCurrent);\n    });\n    newPowerProfiles[pvSource[1].name] = loadProfiles;\n  });\n  return newPowerProfiles;\n}\n\nfunction getDutyIntervals(duty, period, time) {\n  const cycles = Number(duty.cycles);\n  const duration = Number(duty.duration) * 1000;\n  const interval = (period - (duration * cycles)) / cycles;\n  const totalCycles = Math.floor((SIM_LENGTH / period) * cycles);\n  return Array.from({ length: totalCycles }, (value, index) => {\n    const start = time.valueOf() + (interval * (index + 1)) + (duration * index);\n    return {\n      start,\n      end: start + duration,\n    };\n  });\n}\n\nfunction createSatellite(satellite, constellation, isCustomer = true) {\n  const tles = generateTLE({\n    ...satellite.orbit,\n    epoch: new Date(satellite.orbit.epoch),\n  });\n\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  try {\n    getOrbitAtTime({ orbit }, new Date());\n  } catch (err) {\n    const error = `Unable to propagate orbital parameters for ${satellite.orbit.tle}. ${\n      isCustomer ? '\\nPlease try different values or choose a TLE.' : '\\nPlease try different offsets in the power configuration menu.'}`;\n    throw new Error(error);\n  }\n\n  orbit.period = (2 * Math.PI * 60 * 1000) / orbit.no;\n\n  const pv = {\n    sources: PV_SOURCES,\n    voltage: satellite.power.pv.voltage,\n    currentDensity: satellite.power.pv.currentDensity,\n    area: satellite.power.pv.area,\n  };\n\n  const battery = {\n    voltage: satellite.power.battery.voltage,\n    capacity: satellite.power.battery.capacity,\n  };\n\n  const duties = satellite.duties.map((duty) => ({\n    name: duty.name,\n    type: duty.type,\n    priority: duty.priority,\n    consumption: Number(duty.consumption),\n    duration: (Number(duty.duration) * 1000) || null,\n    cycles: Number(duty.cycles) || null,\n    intervals: duty.type === 'cyclical' ? getDutyIntervals(duty, orbit.period, orbit.epochdate) : null,\n  }));\n\n  duties.unshift({\n    name: 'Power storing',\n    type: 'power storing',\n    consumption: satellite.power.pv.powerStoringConsumption,\n  });\n  const powerProfiles = generatePowerProfiles(pv, duties, battery);\n  return {\n    name: satellite.name,\n    color: satellite.color,\n    constellation,\n    id: satellite.id,\n    params: {\n      orbit,\n      battery,\n      pv,\n      load: {\n        powerProfiles,\n        duties,\n      },\n    },\n    isCustomer,\n  };\n}\n\nfunction createPowerSatellite(name, orbit, offsets, constellation) {\n  const newOrbit = { ...orbit };\n  Object.entries(offsets).forEach((offset) => {\n    newOrbit[offset[0]] = orbit[offset[0]] + Number(offset[1]);\n  });\n  const request = {\n    ...POWER_SAT_REQUEST,\n    name,\n    color: constellation.spacePowerColor,\n    id: uuidv4(),\n    orbit: newOrbit,\n  };\n  return createSatellite(request, constellation.id, false);\n}\n\nfunction generateIndices(spacePowersCount, customersCount) {\n  const ratio = customersCount / spacePowersCount;\n  return Array.from({ length: spacePowersCount }, (v, i) => Math.floor(ratio * i));\n}\n\nfunction getIndexCounts(customersCount, indices) {\n  return Array.from(\n    { length: customersCount },\n    (v, i) => indices.filter((index) => Number(index) === i).length,\n  );\n  // if (spacePowers === 0) return [];\n  // if (spacePowers === customers) return Array.from({ length: customers }, (v, i) => 1);\n  // if (spacePowers < customers) {\n  //   const spacing = Math.floor(customers / spacePowers);\n  //   let total = 0;\n  //   return Array.from({ length: customers }, (value, index) => {\n  //     if (index % spacing) return null;\n  //     total += 1;\n  //     if (total > spacePowers) return null;\n  //     return 1;\n  //   });\n  // }\n  // if (spacePowers > customers) {\n  //   let ratio = Math.ceil(spacePowers / customers);\n  //   let total = 0;\n  //   return Array.from(\n  //     { length: customers },\n  //     () => {\n  //       if ((total + ratio) > spacePowers) ratio = spacePowers - total;\n  //       total += 1;\n  //       return ratio;\n  //     },\n  //   );\n  // }\n}\n\nfunction getOffsets(offsets, counts) {\n  return counts.map((count) => {\n    if (count === 0) return null;\n    if (count === 1) return [offsets];\n    if (count > 1) {\n      let multiplier = 0;\n      return Array.from({ length: count }, (v, index) => {\n        if (index % 2 === 0) multiplier += 1;\n        const newOffsets = {};\n        Object.entries(offsets).forEach((offset) => {\n          newOffsets[offset[0]] = offset[1] * multiplier * ((0 - 1) ** index);\n        });\n        return newOffsets;\n      });\n    }\n  });\n}\n\nexport {\n  createSatellite, createPowerSatellite, getOffsets, generateIndices, getIndexCounts,\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable max-len */\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport {\n  getOrbitAtTime, getSunPosition, getEarthRotationAngle, getDistance,\n} from '../Util/astronomy';\nimport { isEclipsed, getChargeState, getNetCurrent } from '../Util/power';\nimport { SIM_LENGTH, BEAM_DISTANCE } from '../Util/constants';\n\nfunction getTimeArray(initial, length, frames) {\n  const initialMillisecs = initial.getTime();\n  const mspf = length / frames;\n  return Array.from({ length: frames }, (value, index) => {\n    const time = initialMillisecs + index * mspf;\n    return time;\n  });\n}\n\nfunction getSatellitePositions(satellite, timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getOrbitAtTime(satellite, new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getSunPositions(timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getSunPosition(new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getEarthRotationAngles(timeArray) {\n  return timeArray.map((time) => getEarthRotationAngle(time));\n}\n\nfunction getEclipsedArray(satellite, sun, timeArray) {\n  return timeArray.map((time, index) => {\n    const satPosition = {\n      x: satellite.positions.x[index],\n      y: satellite.positions.y[index],\n      z: satellite.positions.z[index],\n    };\n\n    const sunPosition = {\n      x: sun.x[index],\n      y: sun.y[index],\n      z: sun.z[index],\n    };\n    return isEclipsed(satPosition, sunPosition);\n  });\n}\n\nfunction getCurrentDuties(duties, timeArray) {\n  return timeArray.map((time) => {\n    let currentDuty = 0;\n    duties.forEach((duty, index) => {\n      if (duty.type === 'power storing') return;\n      duty.intervals.forEach((cycle) => {\n        if ((time >= cycle.start) && (time <= cycle.end)) {\n          if (currentDuty === 0 || (duty.priority < duties[currentDuty].priority)) {\n            currentDuty = index;\n          }\n        }\n      });\n    });\n    return currentDuty;\n  });\n}\n\nfunction getBeams(spacePower, customers, timeArray) {\n  return customers.map((customer) => {\n    const beamName = `${spacePower.name} - ${customer.name}`;\n    const distances = timeArray.map((time, index) => {\n      const spacePowerPosition = {\n        x: spacePower.positions.x[index],\n        y: spacePower.positions.y[index],\n        z: spacePower.positions.z[index],\n      };\n      const customerPosition = {\n        x: customer.positions.x[index],\n        y: customer.positions.y[index],\n        z: customer.positions.z[index],\n      };\n      return getDistance(spacePowerPosition, customerPosition);\n    });\n    const activated = distances.map((distance) => {\n      if ((distance * earthRadius) < BEAM_DISTANCE) return true;\n      return false;\n    });\n    return {\n      name: beamName,\n      distances,\n      activated,\n      customerId: customer.id,\n      spacePowerId: spacePower.id,\n      id: uuidv4(),\n    };\n  });\n}\n\nfunction getBeamDuties(beams, timeArray) {\n  return timeArray.map((time, index) => (beams.reduce((prev, current) => current.activated[index] || prev, false) ? 1 : 0));\n}\n\nfunction getSource(satellite, beams, index) {\n  let hasBeam;\n  if (beams) {\n    const satBeams = beams.filter((b) => b.customerId === satellite.id);\n    hasBeam = satBeams.reduce((prev, current) => current.activated[index] || prev, false);\n  } else {\n    hasBeam = false;\n  }\n\n  const hasSun = !satellite.performance.isEclipsed[index];\n\n  if (!hasSun && hasBeam) return 'beam';\n  if (hasSun && hasBeam) return 'sun and beam';\n  if (!hasSun && !hasBeam) return 'eclipsed';\n  if (hasSun && !hasBeam) return 'sun';\n}\n\nfunction getSources(satellite, beams, timeArray) {\n  return timeArray.map((time, index) => getSource(satellite, beams, index));\n}\n\nfunction getChargeStates(satellite, timeArray, hasBeams = true) {\n  const delta = ((SIM_LENGTH / (60 * 60 * 1000)) / timeArray.length);\n  let chargeState = 1;\n  return timeArray.map((time, index) => {\n    let source = satellite.performance.sources[index];\n    if (hasBeams === false) {\n      if (source === 'sun and beam') source = 'sun';\n      if (source === 'beam') source = 'eclipsed';\n    }\n    chargeState = getChargeState(satellite.params, satellite.performance.currentDuties[index], source, chargeState, delta);\n    if (chargeState > 1) return 1;\n    if (chargeState < 0) return 0;\n    return chargeState;\n  });\n}\n\nfunction getDischargeSaved(satellite) {\n  let timeCharged = 0;\n  const totalCurrentBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    return netCurrent + prev;\n  }, 0);\n  const totalDischargeBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    if (netCurrent < 0) return netCurrent + prev;\n    return prev;\n  }, 0);\n  const totalCurrentNoBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    let sourceNoBeams = source;\n    if (source === 'sun and beam') {\n      sourceNoBeams = 'sun';\n      timeCharged += 1;\n    } else if (source === 'beam') {\n      timeCharged += 1;\n      sourceNoBeams = 'eclipsed';\n    }\n    const netCurrentNoBeams = getNetCurrent(satellite.params, sourceNoBeams, currentDuty);\n    return netCurrentNoBeams + prev;\n  }, 0);\n  const frames = satellite.performance.sources.length;\n  const totalHours = (SIM_LENGTH / (1000 * 60 * 60)) / frames;\n  const totalDischarge = Math.abs(totalDischargeBeams * totalHours);\n  const dischargeSaved = (totalCurrentBeams - totalCurrentNoBeams) * totalHours;\n  timeCharged = ((timeCharged / frames) * SIM_LENGTH) / (1000 * 60);\n  return [totalDischarge, dischargeSaved, timeCharged];\n}\n\nfunction getLowestChargeState(satellite) {\n  const lowestBeams = satellite.performance.chargeState.reduce((prev, current) => (current < prev ? current : prev), 1);\n  const lowestNoBeams = satellite.performance.chargeStateNoBeams.reduce((prev, current) => (current < prev ? current : prev), 1);\n  return [lowestBeams, lowestNoBeams];\n}\n\nexport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEarthRotationAngles,\n  getEclipsedArray,\n  getCurrentDuties,\n  getSources,\n  getChargeStates,\n  getBeams,\n  getBeamDuties,\n  getDischargeSaved,\n  getLowestChargeState,\n};\n","import { FRAMES, SIM_LENGTH } from '../../Util/constants';\nimport {\n  initializeConstellations, initializeCustomers,\n  simulateBaseData, simulateBatteries, simulateConstellations, simulateSpacePowers,\n} from '../mission';\n\nonmessage = function (event) {\n  console.log(FRAMES);\n  const { req } = event.data;\n  postMessage({ done: false, message: 'Simulating celestial bodies' });\n  const [time, sun, earth] = simulateBaseData(\n    req.constellations[0].satellites[0],\n    SIM_LENGTH,\n    FRAMES,\n  );\n  postMessage({ done: false, message: 'Initializing constellations' });\n  let constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  postMessage({ done: false, message: 'Initializing space power' });\n  const [spacePowers, beams] = simulateSpacePowers(\n    time,\n    sun,\n    req.constellations,\n    customers,\n    req.offsets,\n  );\n  postMessage({ done: false, message: 'Simulating power systems' });\n  simulateBatteries(customers, time, beams);\n  constellations = simulateConstellations(time, constellations, customers, spacePowers);\n  const mission = {\n    success: true,\n    time,\n    satellites: {\n      customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n    sun,\n    earth,\n  };\n\n  postMessage({ done: true, mission });\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-continue */\n/* eslint-disable no-console */\n/* eslint-disable import/prefer-default-export */\nimport {\n  pi,\n  tumin,\n  deg2rad,\n  earthRadius,\n} from 'satellite.js/lib/constants';\n\nimport { jday, days2mdhms } from 'satellite.js/lib/ext';\n\nimport sgp4init from 'satellite.js/lib/propagation/sgp4init';\n\nimport * as satelliteUtils from 'satellite.js';\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\nfunction extractTLE(longstr1, longstr2) {\n  const orbitElements = {};\n\n  orbitElements.epochYear = parseInt(longstr1.substring(18, 20), 10);\n  orbitElements.epochDays = parseFloat(longstr1.substring(20, 32));\n  orbitElements.meanMotionDot = parseFloat(longstr1.substring(33, 43));\n  orbitElements.meanMotionDoubleDot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  orbitElements.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n\n  // satrec.satnum = longstr2.substring(2, 7);\n  orbitElements.inclination = parseFloat(longstr2.substring(8, 16));\n  orbitElements.rightAscension = parseFloat(longstr2.substring(17, 25));\n  orbitElements.eccentricity = parseFloat(`.${longstr2.substring(26, 33)}`);\n  orbitElements.perigee = parseFloat(longstr2.substring(34, 42));\n  orbitElements.meanAnomaly = parseFloat(longstr2.substring(43, 51));\n  orbitElements.meanMotion = parseFloat(longstr2.substring(52, 63));\n  let year;\n  if (orbitElements.epochYear < 57) {\n    year = orbitElements.epochYear + 2000;\n  } else {\n    year = orbitElements.epochYear + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, orbitElements.epochDays);\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  orbitElements.epoch = new Date(year, mon, day, hr, minute, sec);\n\n  return orbitElements;\n}\n\nfunction daysIntoYear(date) {\n  return (\n    (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n      - Date.UTC(date.getFullYear(), 0, 0))\n    / 24\n    / 60\n    / 60\n    / 1000\n  );\n}\n\nfunction generateTLE(orbitElements) {\n  const {\n    epoch,\n    meanMotionDot,\n    bstar,\n    inclination,\n    rightAscension,\n    eccentricity,\n    perigee,\n    meanAnomaly,\n    meanMotion,\n  } = orbitElements;\n  let epochYr = String(epoch.getYear());\n  if (epochYr > 100) epochYr = epochYr.substring(1);\n\n  let epochDay = daysIntoYear(epoch);\n  if (epochDay < 100) epochDay = `0${epochDay}`;\n\n  const epochFraction = String(\n    (\n      epoch.getHours() / 24\n      + epoch.getMinutes() / (60 * 24)\n      + epoch.getSeconds() / (60 * 60 * 24)\n    ).toFixed(8),\n  ).substring(1);\n\n  let meanMotionDotString = String(\n    Number(meanMotionDot).toFixed(8),\n  ).substring(1);\n  if (meanMotionDot < 0) { meanMotionDotString = `-${meanMotionDotString.substring(1)}`; }\n  if (meanMotionDot >= 0) { meanMotionDotString = ` ${meanMotionDotString}`; }\n\n  let bstarMant = String(Number(bstar).toExponential(5))\n    .split('.')\n    .join('')\n    .substring(0, 6);\n  if (bstar >= 0) bstarMant = ` ${bstarMant.substring(0, 5)}`;\n  let bstarExp = 0;\n  if (Number(bstar) !== 0) bstarExp = Math.ceil(Math.log10(Math.abs(bstar)));\n  else bstarExp = '+0';\n\n  const tle1 = `1 00000C 00000A   ${epochYr}${epochDay}${epochFraction} ${meanMotionDotString}  00000-0 ${bstarMant}${bstarExp} 0  0000`;\n  const inclinationString = String(Number(inclination).toFixed(4));\n  // if (inclination < 100) inclinationString = ` ${inclinationString}`;\n\n  const rightAscensionString = String(Number(rightAscension).toFixed(4));\n  // if (rightAscension < 100) { rightAscensionString = ` ${rightAscensionString}`; }\n\n  const eccentricityString = String(\n    Number(eccentricity).toFixed(8),\n  ).substring(2, 9);\n  let perigeeString = String(Number(perigee).toFixed(4));\n  if (perigee < 100) perigeeString = ` ${perigeeString}`;\n\n  const meanAnomalyString = String(Number(meanAnomaly).toFixed(4));\n  // if (meanAnomalyString < 100) { meanAnomalyString = ` ${meanAnomalyString}`; }\n\n  const meanMotionString = String(Number(meanMotion).toPrecision(9));\n  const tle2 = `2 00000 ${inclinationString.padStart(8)} ${rightAscensionString.padStart(8)} ${eccentricityString} ${perigeeString.padStart(8)} ${meanAnomalyString} ${meanMotionString.padStart(13)}    00`;\n\n  return {\n    tle1,\n    tle2,\n  };\n}\n\nfunction twoline2satrec(longstr1, longstr2) {\n  const opsmode = 'i';\n  const xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n  let year = 0;\n\n  const satrec = {};\n  satrec.error = 0;\n\n  satrec.satnum = longstr1.substring(2, 7);\n\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  satrec.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n  // satrec.satnum = longstr2.substring(2, 7);\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(`.${longstr2.substring(26, 33)}`);\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63));\n  // ---- find no, ndot, nddot ----\n  satrec.notle = satrec.no;\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n  // ---- convert to sgp4 units ----\n  satrec.a = (satrec.no * tumin) ** (-2.0 / 3.0);\n  satrec.ndottle = satrec.ndot;\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n  satrec.nddot /= xpdotp * 1440.0 * 1440;\n\n  // ---- find standard orbital elements ----\n  satrec.inclotle = satrec.inclo;\n  satrec.inclo *= deg2rad;\n  satrec.nodeotle = satrec.nodeo;\n  satrec.nodeo *= deg2rad;\n  satrec.argpotle = satrec.argpo;\n  satrec.argpo *= deg2rad;\n  satrec.motle = satrec.mo;\n  satrec.mo *= deg2rad;\n\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0;\n\n  // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, satrec.epochdays);\n\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec);\n  satrec.epochdate = new Date(year, mon, day, hr, minute, sec);\n  satrec.epochdatetimelocal = new Date(\n    satrec.epochdate.getTime() - satrec.epochdate.getTimezoneOffset() * 60000,\n  ).toISOString().substring(0, 19);\n\n  //  ---------------- initialize the orbit at sgp4epoch -------------------\n  sgp4init(satrec, {\n    opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo,\n  });\n\n  return satrec;\n}\n\nfunction getCorsFreeUrl(url) {\n  return `https://api.allorigins.win/raw?url=${url}`;\n}\n\nfunction parseTLEs(fileContent) {\n  const result = [];\n  const lines = fileContent.split('\\n');\n  if (lines < 2) throw new Error('Error parsing TLE');\n  let current = null;\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i].trim();\n    if (line.length === 0) continue;\n\n    if (line[0] !== '1' && line[0] !== '2') {\n      current = {\n        name: line,\n      };\n    } else if (line[0] === '1') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle1: line },\n      };\n    } else if (line[0] === '2') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle2: line },\n      };\n      result.push(current);\n    } else throw new Error('Error parsing TLE');\n  }\n\n  return result;\n}\n\nfunction loadTLEsJSON(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => JSON.parse(text));\n    }\n  });\n}\n\nfunction loadTLEs(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => {\n        const satellites = parseTLEs(text);\n        console.log(text, satellites);\n        return satellites;\n      });\n    }\n  });\n}\n\nconst toThree = (v) => ({\n  x: v.x / earthRadius,\n  y: v.z / earthRadius,\n  z: -v.y / earthRadius,\n});\n\nfunction getPositionFromTLE(satellite, date) {\n  const positionVelocity = satelliteUtils.propagate(\n    satellite.orbit,\n    date,\n  );\n  const positionEci = positionVelocity.position;\n  return toThree(positionEci);\n}\n\nfunction getOrbitAtTime(satellite, time) {\n  const pos = getPositionFromTLE(satellite, time);\n  return { x: pos.x, y: pos.y, z: pos.z };\n}\n\nfunction getSunPosition(time) {\n  const N = time.getTime() / 86400000 + 2440587 - 2451545;\n  let L = 4.89495042 + 0.0172027923937 * N;\n  if (L > 2 * Math.PI) L -= 2 * Math.PI;\n  let g = 6.240040768 + 0.0172019703436 * N;\n  if (g > 2 * Math.PI) g -= 2 * Math.PI;\n  const longitude = L + 0.033423055 * Math.sin(g) + 0.0003490659 * Math.sin(g);\n  const distance = 1.00014 - 0.01671 * Math.cos(g) - 0.00014 * Math.cos(2 * g)\n  * (149597870.7 / earthRadius);\n  const obliquity = 0.40907027 - 6.981317008e-9 * N;\n  const y = (distance * Math.sin(obliquity) * Math.sin(longitude));\n\n  const x = (distance * Math.cos(longitude));\n  const z = -(distance * Math.cos(obliquity) * Math.sin(longitude));\n\n  return { x, y, z };\n}\n\nfunction getEarthRotationAngle(date) {\n  const JD = date / 86400000 + 2440587 - 2451545;\n  return 2 * Math.PI * (0.779057273264 + 1.002737811911355 * JD);\n}\n\nfunction getDistance(position1, position2) {\n  const a = position1.x - position2.x;\n  const b = position1.y - position2.y;\n  const c = position1.z - position2.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport {\n  twoline2satrec,\n  generateTLE,\n  extractTLE,\n  getOrbitAtTime,\n  getSunPosition,\n  getEarthRotationAngle,\n  getDistance,\n  parseTLEs,\n  getCorsFreeUrl,\n  loadTLEs,\n  loadTLEsJSON,\n};\n","const SIM_LENGTH = 24 * 60 * 60 * 2 * 1000; // ms\nconst FPmS = 120 / 1000;\n\nconst BEAM_DISTANCE = 1000;\nconst MIN_SPEED = 600;\nconst FRAMES = SIM_LENGTH * (FPmS / MIN_SPEED);\n\nexport {\n  FPmS,\n  SIM_LENGTH,\n  MIN_SPEED,\n  FRAMES,\n  BEAM_DISTANCE,\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/prefer-default-export */\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport { Vector3 } from 'three';\n\nconst earthPosition = new Vector3(0, 0, 0);\nconst sunPosition = new Vector3();\nconst satPosition = new Vector3();\nconst sunEarth = new Vector3();\nconst sunSat = new Vector3();\n\nfunction isEclipsed(satellite, sun) {\n  sunPosition.fromArray([sun.x, sun.y, sun.z]);\n  satPosition.fromArray([satellite.x, satellite.y, satellite.z]);\n\n  sunEarth.subVectors(earthPosition, sunPosition);\n  sunSat.subVectors(satPosition, earthPosition);\n\n  const angle = sunEarth.angleTo(sunSat);\n\n  const sunEarthDistance = sunPosition.distanceTo(earthPosition);\n  const sunSatDistance = sunPosition.distanceTo(satPosition);\n  const limbAngle = Math.atan2(earthRadius, sunEarthDistance);\n\n  if (angle > limbAngle || sunSatDistance < sunEarthDistance) {\n    return false;\n  }\n  return true;\n}\n\nfunction getNetCurrent(params, source, currentDuty) {\n  const powerProfile = params.load.powerProfiles[source];\n  return powerProfile[currentDuty];\n}\n\nfunction getChargeState(\n  params,\n  currentDuty,\n  source,\n  chargeState,\n  delta,\n) {\n  const netCurrent = getNetCurrent(params, source, currentDuty);\n  const { capacity } = params.battery;\n\n  if (chargeState >= 1.0 && netCurrent >= 0) {\n    return 1;\n  }\n\n  if (chargeState <= 0 && netCurrent <= 0) {\n    return 0;\n  }\n\n  return (\n    (\n      (chargeState * capacity)\n      + (delta * netCurrent)\n    ) / capacity\n  );\n}\n\nexport { isEclipsed, getChargeState, getNetCurrent };\n","/*!\n * satellite-js v4.1.4\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.x2o3 = exports.j3oj2 = exports.j4 = exports.j3 = exports.j2 = exports.tumin = exports.vkmpersec = exports.xke = exports.earthRadius = exports.mu = exports.minutesPerDay = exports.rad2deg = exports.deg2rad = exports.twoPi = exports.pi = void 0;\nvar pi = Math.PI;\nexports.pi = pi;\nvar twoPi = pi * 2;\nexports.twoPi = twoPi;\nvar deg2rad = pi / 180.0;\nexports.deg2rad = deg2rad;\nvar rad2deg = 180 / pi;\nexports.rad2deg = rad2deg;\nvar minutesPerDay = 1440.0;\nexports.minutesPerDay = minutesPerDay;\nvar mu = 398600.5; // in km3 / s2\n\nexports.mu = mu;\nvar earthRadius = 6378.137; // in km\n\nexports.earthRadius = earthRadius;\nvar xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu);\nexports.xke = xke;\nvar vkmpersec = earthRadius * xke / 60.0;\nexports.vkmpersec = vkmpersec;\nvar tumin = 1.0 / xke;\nexports.tumin = tumin;\nvar j2 = 0.00108262998905;\nexports.j2 = j2;\nvar j3 = -0.00000253215306;\nexports.j3 = j3;\nvar j4 = -0.00000161098761;\nexports.j4 = j4;\nvar j3oj2 = j3 / j2;\nexports.j3oj2 = j3oj2;\nvar x2o3 = 2.0 / 3.0;\nexports.x2o3 = x2o3;"],"names":["SatelliteSchema","Yup","shape","name","min","max","trim","color","matches","orbit","tle","list","meanMotionDot","required","bstar","inclination","rightAscension","eccentricity","perigee","meanAnomaly","meanMotion","power","pv","voltage","currentDensity","area","powerStoringConsumption","preset","oneOf","battery","capacity","duties","of","type","priority","integer","consumption","duration","when","is","then","cycles","simulateBaseData","constellations","payload","satelliteCount","satellites","spacePowersCount","spacePowerIndices","offsets","baseSatellite","length","frames","tles","generateTLE","epoch","Date","twoline2satrec","tle1","tle2","time","getTimeArray","epochdate","getSunPositions","getEarthRotationAngles","initializeConstellations","map","constellation","satellite","id","initializeCustomers","sun","customers","forEach","push","createSatellite","customer","positions","getSatellitePositions","params","performance","currentDuties","getCurrentDuties","load","isEclipsed","getEclipsedArray","simulateSpacePowers","spacePowers","indices","generateIndices","counts","getIndexCounts","getOffsets","index","offset","createPowerSatellite","initializeSpacePowers","beams","spacePower","satBeams","getBeams","filter","c","getBeamDuties","sources","getSources","chargeState","getChargeStates","simulateBatteries","chargeStateNoBeams","totalDischarge","dischargeSaved","timeCharged","getDischargeSaved","lowestChargeStateBeams","lowestChargeStateNoBeams","getLowestChargeState","summary","simulateConstellations","find","isCustomer","t","reduce","prev","current","PV_SOURCES","sunOnly","efficiency","beamOnly","sunAndBeam","eclipsed","POWER_SAT_REQUEST","getDutyIntervals","duty","period","Number","interval","totalCycles","Math","floor","SIM_LENGTH","Array","from","value","start","valueOf","end","getOrbitAtTime","err","error","Error","PI","no","intervals","unshift","powerProfiles","newPowerProfiles","Object","entries","pvSource","pvPower","loadProfiles","netCurrent","generatePowerProfiles","newOrbit","spacePowerColor","uuidv4","customersCount","ratio","v","i","count","multiplier","newOffsets","initial","initialMillisecs","getTime","mspf","timeArray","x","y","z","pos","getSunPosition","getEarthRotationAngle","satPosition","sunPosition","currentDuty","cycle","beamName","distances","spacePowerPosition","customerPosition","getDistance","activated","distance","earthRadius","BEAM_DISTANCE","customerId","spacePowerId","hasBeam","b","hasSun","getSource","hasBeams","delta","source","getChargeState","totalCurrentBeams","getNetCurrent","totalDischargeBeams","totalCurrentNoBeams","sourceNoBeams","totalHours","abs","onmessage","event","console","log","FRAMES","req","data","postMessage","done","message","earth","mission","success","orbitElements","epochYr","String","getYear","substring","epochDay","date","UTC","getFullYear","getMonth","getDate","epochFraction","getHours","getMinutes","getSeconds","toFixed","meanMotionDotString","bstarMant","toExponential","split","join","bstarExp","ceil","log10","inclinationString","rightAscensionString","eccentricityString","perigeeString","meanAnomalyString","meanMotionString","toPrecision","padStart","longstr1","longstr2","xpdotp","pi","year","satrec","satnum","epochyr","parseInt","epochdays","parseFloat","ndot","nddot","inclo","nodeo","ecco","argpo","mo","notle","a","tumin","ndottle","inclotle","deg2rad","nodeotle","argpotle","motle","alta","altp","mdhmsResult","days2mdhms","mon","day","hr","minute","sec","jdsatepoch","jday","epochdatetimelocal","getTimezoneOffset","toISOString","sgp4init","opsmode","satn","xbstar","xecco","xargpo","xinclo","xmo","xno","xnodeo","satelliteUtils","position","getPositionFromTLE","N","L","g","longitude","sin","cos","obliquity","JD","position1","position2","sqrt","earthPosition","Vector3","sunEarth","sunSat","fromArray","subVectors","angle","angleTo","sunEarthDistance","distanceTo","sunSatDistance","atan2","defineProperty","exports","x2o3","j3oj2","j4","j3","j2","vkmpersec","xke","mu","minutesPerDay","rad2deg","twoPi"],"sourceRoot":""}