{"version":3,"file":"582.bundle.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/startup chunk dependencies","webpack:///./src/Model/mission.js","webpack:///./src/Model/satellite.js","webpack:///./src/Model/simulation.js","webpack:///./src/Model/workers/fitnessWorker.js","webpack:///./src/Util/astronomy.js","webpack:///./src/Util/constants.js","webpack:///./src/Util/power.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/importScripts chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([546,752,119].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","/* eslint-disable consistent-return */\n/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\nimport * as Yup from 'yup';\nimport { generateTLE, twoline2satrec } from '../Util/astronomy';\nimport { FRAMES, SIM_LENGTH } from '../Util/constants';\nimport {\n  createSatellite, createPowerSatellite, getOffsets, getIndexCounts, generateIndices,\n} from './satellite';\nimport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEclipsedArray,\n  getCurrentDuties,\n  getBeams,\n  getBeamDuties,\n  getChargeStates,\n  getDischargeSaved,\n  getEarthRotationAngles,\n  getSources,\n  getLowestChargeState,\n} from './simulation';\n\nconst SatelliteSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .trim(),\n  color: Yup.string()\n    .trim()\n    .matches(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i),\n  orbit: Yup.object().shape({\n    tle: Yup.string(),\n    list: Yup.string(),\n    meanMotionDot: Yup.number()\n      .min(-1, 'Must be more than -1')\n      .max(1, 'Must be less than 1')\n      .required('meanMotionDot is required'),\n    bstar: Yup.number()\n      .min(-2, 'Must be between -2 and 2')\n      .max(2, 'Must be between -2 and 2')\n      .required('bstar is required'),\n    inclination: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('inclination is required'),\n    rightAscension: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('right ascension is required'),\n    eccentricity: Yup.number()\n      .min(0, 'Must be between 0 and 1')\n      .max(1, 'Must be between 0 and 1')\n      .required('eccentricity is required'),\n    perigee: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('perigee is required'),\n    meanAnomaly: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('mean anomaly is required'),\n    meanMotion: Yup.number()\n      .min(0, 'Must be greater than 0')\n      .max(16, 'Must be less than 16')\n      .required('mean motion is required'),\n  }),\n  power: Yup.object().shape({\n    pv: Yup.object().shape({\n      voltage: Yup.number()\n        .min(0, 'Must be positive')\n        .required('pv voltage is required'),\n      currentDensity: Yup.number()\n        .min(0, 'Must be positive')\n        .required('pv current density is required'),\n      area: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('pv area is required'),\n      powerStoringConsumption: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('Power storing consumption is required'),\n      preset: Yup.string()\n        .oneOf(['small', 'medium', 'large', 'custom']),\n    }),\n    battery: Yup.object().shape({\n      voltage: Yup.number()\n        .min(0, 'Must be positive')\n        .required('battery voltage is required'),\n      capacity: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('battery capacity is required'),\n      preset: Yup.string()\n        .oneOf(['small', 'medium', 'large', 'custom']),\n    }),\n  }),\n  duties: Yup.array()\n    .of(\n      Yup.object().shape({\n        type: Yup.string()\n          .oneOf(['cyclical'])\n          .required('Type is required'),\n        name: Yup.string()\n          .min(2, 'Too Short!')\n          .max(30, 'Too Long!')\n          .required('required!'),\n        priority: Yup.number()\n          .integer()\n          .min(1)\n          .required('Priority is required'),\n        consumption: Yup.number()\n          .min(0, 'Must be positive')\n          .required('Consumption is required'),\n        duration: Yup.number()\n          .min(0, 'Must be positive')\n          .when(\n            'type',\n            {\n              is: 'cyclical',\n              then: Yup.number().required('Duration is required'),\n            },\n          ),\n        cycles: Yup.number()\n          .min(0, 'Must be positive')\n          .when(\n            'type',\n            {\n              is: 'cyclical',\n              then: Yup.number().required('Cycles is required'),\n            },\n          ),\n      }),\n    ),\n});\n\nconst MissionSchema = Yup.object().shape({\n  constellations: Yup.array().of(\n    Yup.object().shape({\n      name: Yup.string()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .trim(),\n      list: Yup.string(),\n      payload: SatelliteSchema,\n      satelliteCount: Yup.number().min(0).required('Satellite count is required'),\n      satellites: Yup.array().of(SatelliteSchema),\n      spacePowersCount: Yup.number()\n        .integer()\n        .min(0, 'Must be an integer greater than or equal to 0'),\n      spacePowerIndices: Yup.array().of(\n        Yup.number()\n          .min(0),\n      ),\n      offsets: Yup.object().shape({\n        inclination: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('inclination is required'),\n        rightAscension: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('right ascension is required'),\n        eccentricity: Yup.number()\n          .min(0, 'Must be between 0 and 1')\n          .max(1, 'Must be between 0 and 1')\n          .required('eccentricity is required'),\n        perigee: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('perigee is required'),\n        meanAnomaly: Yup.number()\n          .min(0, 'Must be 0-360°')\n          .max(360, 'Must be 0-360°')\n          .required('mean anomaly is required'),\n        meanMotion: Yup.number()\n          .min(0, 'Must be greater than 0')\n          .max(16, 'Must be less than 16')\n          .required('mean motion is required'),\n      }),\n    }),\n  ),\n});\n\nconst simulateBaseData = (baseSatellite, length, frames) => {\n  const tles = generateTLE({\n    ...baseSatellite.orbit,\n    epoch: new Date(baseSatellite.orbit.epoch),\n  });\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  const time = getTimeArray(orbit.epochdate, length, frames);\n  const sun = getSunPositions(time);\n  const earth = getEarthRotationAngles(time);\n  return [time, sun, earth];\n};\n\nconst initializeConstellations = (constellations) => constellations.map((constellation) => ({\n  ...constellation,\n  satellites: constellation.satellites.map((satellite) => satellite.id),\n}));\n\nconst initializeCustomers = (constellations, time, sun) => {\n  const customers = [];\n  constellations.forEach((constellation) => {\n    constellation.satellites.forEach((satellite) => {\n      customers.push(createSatellite(satellite, constellation.id));\n    });\n  });\n  customers.forEach((customer) => {\n    customer.positions = getSatellitePositions(customer.params, time);\n    customer.performance = {\n      currentDuties: getCurrentDuties(customer.params.load.duties, time),\n      isEclipsed: getEclipsedArray(customer, sun, time),\n    };\n  });\n  return customers;\n};\n\nconst initializeSpacePowers = (constellations) => {\n  const spacePowers = [];\n  constellations.forEach((constellation) => {\n    let indices;\n    if (!constellation.spacePowerIndices) indices = generateIndices(constellation.spacePowersCount, constellation.satellites.length);\n    else indices = constellation.spacePowerIndices;\n    const counts = getIndexCounts(constellation.satellites.length, indices);\n    const offsets = getOffsets(constellation.offsets, counts);\n    constellation.satellites.forEach((satellite, index) => {\n      if (!offsets[index]) return;\n      return offsets[index].forEach((offset) => {\n        spacePowers.push(createPowerSatellite(\n          `Space Power ${index + 1}`,\n          satellite.orbit,\n          offset,\n          constellation,\n        ));\n      });\n    });\n  });\n\n  return spacePowers;\n};\n\nconst simulateSpacePowers = (time, sun, constellations, customers) => {\n  const spacePowers = initializeSpacePowers(constellations);\n  const beams = [];\n  spacePowers.forEach((spacePower) => {\n    spacePower.positions = getSatellitePositions(spacePower.params, time);\n    const satBeams = getBeams(spacePower, customers.filter((c) => c.constellation === spacePower.constellation), time);\n    spacePower.performance = {\n      currentDuties: getBeamDuties(satBeams, time),\n      isEclipsed: getEclipsedArray(spacePower, sun, time),\n    };\n    spacePower.performance.sources = getSources(spacePower, satBeams, time);\n    spacePower.performance.chargeState = getChargeStates(spacePower, time);\n    beams.push(...satBeams);\n  });\n  return [spacePowers, beams];\n};\n\nconst simulateBatteries = (customers, time, beams) => {\n  customers.forEach((customer) => {\n    customer.performance.sources = getSources(customer, beams, time);\n    customer.performance = {\n      ...customer.performance,\n      chargeState: getChargeStates(customer, time),\n      chargeStateNoBeams: getChargeStates(customer, time, false),\n    };\n    const [totalDischarge, dischargeSaved, timeCharged] = getDischargeSaved(customer);\n    const [lowestChargeStateBeams, lowestChargeStateNoBeams] = getLowestChargeState(customer);\n    customer.summary = {\n      totalDischarge,\n      dischargeSaved,\n      timeCharged,\n      lowestChargeStateBeams,\n      lowestChargeStateNoBeams,\n    };\n  });\n};\n\nconst simulateConstellations = (time, constellations, customers, spacePowers) => constellations.map((constellation) => {\n  const satellites = constellation.satellites.map((id) => customers.find((customer) => customer.id === id));\n  return {\n    ...constellation,\n    isCustomer: true,\n    spacePowers: spacePowers.filter((spacePower) => spacePower.constellation === constellation.id).map((spacePower) => spacePower.id),\n    performance: {\n      chargeState: time.map((t, index) => satellites.reduce((prev, current) => prev + current.performance.chargeState[index], 0) / customers.length),\n      chargeStateNoBeams: time.map((t, index) => satellites.reduce((prev, current) => prev + current.performance.chargeStateNoBeams[index], 0) / customers.length),\n    },\n    summary: {\n      // totalDischarge: satellites.reduce((prev, current) => prev + current.summary.totalDischarge, 0),\n      dischargeSaved: satellites.reduce((prev, current) => prev + current.summary.dischargeSaved, 0),\n      timeCharged: satellites.reduce((prev, current) => prev + current.summary.timeCharged, 0),\n      lowestChargeStateBeams: satellites.reduce((prev, current) => {\n        const c = current.summary.lowestChargeStateBeams;\n        return prev < c ? prev : c;\n      }, satellites[0].summary.lowestChargeStateBeams),\n      lowestChargeStateNoBeams: satellites.reduce((prev, current) => {\n        const c = current.summary.lowestChargeStateNoBeams;\n        return prev < c ? prev : c;\n      }, satellites[0].summary.lowestChargeStateNoBeams),\n    },\n  };\n});\n\nconst handleMissionRequest = (req, length = SIM_LENGTH, frames = FRAMES) => {\n  const [time, sun, earth] = simulateBaseData(req.constellations[0].satellites[0], length, frames);\n  let constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  const [spacePowers, beams] = simulateSpacePowers(time, sun, req.constellations, customers);\n  simulateBatteries(customers, time, beams);\n  constellations = simulateConstellations(time, constellations, customers, spacePowers);\n  return {\n    success: true,\n    time,\n    satellites: {\n      customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n    sun,\n    earth,\n  };\n};\n\nconst generatePartialMission = (req, length = SIM_LENGTH, frames = FRAMES) => {\n  const [time, sun, earth] = simulateBaseData(req.constellations[0].satellites[0], length, frames);\n  const constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  return {\n    time,\n    constellations,\n    satellites: {\n      customers,\n    },\n    sun,\n    earth,\n  };\n};\n\nconst handleOptimizerMission = (mission, req) => {\n  const [spacePowers, beams] = simulateSpacePowers(\n    mission.time,\n    mission.sun,\n    req.constellations,\n    mission.satellites.customers,\n  );\n  simulateBatteries(mission.satellites.customers, mission.time, beams);\n  const constellations = simulateConstellations(\n    mission.time,\n    mission.constellations,\n    mission.satellites.customers,\n    spacePowers,\n  );\n  return {\n    ...mission,\n    success: true,\n    satellites: {\n      customers: mission.satellites.customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n  };\n};\n\nexport {\n  handleMissionRequest, simulateBaseData, initializeConstellations, initializeCustomers,\n  simulateSpacePowers, simulateBatteries, simulateConstellations, generatePartialMission,\n  handleOptimizerMission, initializeSpacePowers,\n  MissionSchema,\n};\n","/* eslint-disable array-callback-return */\n/* eslint-disable consistent-return */\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  twoline2satrec,\n  generateTLE,\n  getOrbitAtTime,\n} from '../Util/astronomy';\nimport { SIM_LENGTH } from '../Util/constants';\n\nconst PV_SOURCES = {\n  sunOnly: {\n    name: 'sun',\n    efficiency: 1,\n  },\n  beamOnly: {\n    name: 'beam',\n    efficiency: 1,\n  },\n  sunAndBeam: {\n    name: 'sun and beam',\n    efficiency: 1.5,\n  },\n  eclipsed: {\n    name: 'eclipsed',\n    efficiency: 0,\n  },\n};\n\nconst POWER_SAT_REQUEST = {\n  power: {\n    pv: {\n      voltage: 4.7,\n      currentDensity: 170.5,\n      area: 0.0128,\n      powerStoringConsumption: 1.2,\n    },\n    battery: {\n      voltage: 3.6,\n      capacity: 1.125,\n    },\n  },\n  duties: [\n    {\n      name: 'beaming',\n      duration: null,\n      cycles: null,\n      consumption: 3.2,\n      type: 'space power',\n    },\n  ],\n};\n\nfunction generatePowerProfiles(pv, duties, battery) {\n  const { area, voltage, currentDensity } = pv;\n  const newPowerProfiles = [];\n  Object.entries(pv.sources).forEach((pvSource) => {\n    const current = currentDensity * pvSource[1].efficiency * area;\n    const pvPower = current * voltage;\n    const loadProfiles = [];\n    duties.forEach((duty) => {\n      const netPower = pvPower - duty.consumption;\n      const netCurrent = netPower / battery.voltage;\n      loadProfiles.push(netCurrent);\n    });\n    newPowerProfiles[pvSource[1].name] = loadProfiles;\n  });\n  return newPowerProfiles;\n}\n\nfunction getDutyIntervals(duty, period, time) {\n  const cycles = Number(duty.cycles);\n  const duration = Number(duty.duration) * 1000;\n  const interval = (period - (duration * cycles)) / cycles;\n  const totalCycles = Math.floor((SIM_LENGTH / period) * cycles);\n  return Array.from({ length: totalCycles }, (value, index) => {\n    const start = time.valueOf() + (interval * (index + 1)) + (duration * index);\n    return {\n      start,\n      end: start + duration,\n    };\n  });\n}\n\nfunction createSatellite(satellite, constellation, isCustomer = true) {\n  const tles = generateTLE({\n    ...satellite.orbit,\n    epoch: new Date(satellite.orbit.epoch),\n  });\n\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  try {\n    getOrbitAtTime({ orbit }, new Date());\n  } catch (err) {\n    const error = `Unable to propagate orbital parameters for ${satellite.orbit.tle}. ${\n      isCustomer ? '\\nPlease try different values or choose a TLE.' : '\\nPlease try different offsets in the power configuration menu.'}`;\n    throw new Error(error);\n  }\n\n  orbit.period = (2 * Math.PI * 60 * 1000) / orbit.no;\n\n  const pv = {\n    sources: PV_SOURCES,\n    voltage: satellite.power.pv.voltage,\n    currentDensity: satellite.power.pv.currentDensity,\n    area: satellite.power.pv.area,\n  };\n\n  const battery = {\n    voltage: satellite.power.battery.voltage,\n    capacity: satellite.power.battery.capacity,\n  };\n\n  const duties = satellite.duties.map((duty) => ({\n    name: duty.name,\n    type: duty.type,\n    priority: duty.priority,\n    consumption: Number(duty.consumption),\n    duration: (Number(duty.duration) * 1000) || null,\n    cycles: Number(duty.cycles) || null,\n    intervals: duty.type === 'cyclical' ? getDutyIntervals(duty, orbit.period, orbit.epochdate) : null,\n  }));\n\n  duties.unshift({\n    name: 'Power storing',\n    type: 'power storing',\n    consumption: satellite.power.pv.powerStoringConsumption,\n  });\n  const powerProfiles = generatePowerProfiles(pv, duties, battery);\n  return {\n    name: satellite.name,\n    color: satellite.color,\n    constellation,\n    id: satellite.id,\n    params: {\n      orbit,\n      battery,\n      pv,\n      load: {\n        powerProfiles,\n        duties,\n      },\n    },\n    isCustomer,\n  };\n}\n\nfunction createPowerSatellite(name, orbit, offsets, constellation) {\n  const newOrbit = { ...orbit };\n  Object.entries(offsets).forEach((offset) => {\n    newOrbit[offset[0]] = orbit[offset[0]] + Number(offset[1]);\n  });\n  const request = {\n    ...POWER_SAT_REQUEST,\n    name,\n    color: constellation.spacePowerColor,\n    id: uuidv4(),\n    orbit: newOrbit,\n  };\n  return createSatellite(request, constellation.id, false);\n}\n\nfunction generateIndices(spacePowersCount, customersCount) {\n  const ratio = customersCount / spacePowersCount;\n  return Array.from({ length: spacePowersCount }, (v, i) => Math.floor(ratio * i));\n}\n\nfunction getIndexCounts(customersCount, indices) {\n  return Array.from(\n    { length: customersCount },\n    (v, i) => indices.filter((index) => Number(index) === i).length,\n  );\n  // if (spacePowers === 0) return [];\n  // if (spacePowers === customers) return Array.from({ length: customers }, (v, i) => 1);\n  // if (spacePowers < customers) {\n  //   const spacing = Math.floor(customers / spacePowers);\n  //   let total = 0;\n  //   return Array.from({ length: customers }, (value, index) => {\n  //     if (index % spacing) return null;\n  //     total += 1;\n  //     if (total > spacePowers) return null;\n  //     return 1;\n  //   });\n  // }\n  // if (spacePowers > customers) {\n  //   let ratio = Math.ceil(spacePowers / customers);\n  //   let total = 0;\n  //   return Array.from(\n  //     { length: customers },\n  //     () => {\n  //       if ((total + ratio) > spacePowers) ratio = spacePowers - total;\n  //       total += 1;\n  //       return ratio;\n  //     },\n  //   );\n  // }\n}\n\nfunction getOffsets(offsets, counts) {\n  return counts.map((count) => {\n    if (count === 0) return null;\n    if (count === 1) return [offsets];\n    if (count > 1) {\n      let multiplier = 0;\n      return Array.from({ length: count }, (v, index) => {\n        if (index % 2 === 0) multiplier += 1;\n        const newOffsets = {};\n        Object.entries(offsets).forEach((offset) => {\n          newOffsets[offset[0]] = offset[1] * multiplier * ((0 - 1) ** index);\n        });\n        return newOffsets;\n      });\n    }\n  });\n}\n\nexport {\n  createSatellite, createPowerSatellite, getOffsets, generateIndices, getIndexCounts,\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable max-len */\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport {\n  getOrbitAtTime, getSunPosition, getEarthRotationAngle, getDistance,\n} from '../Util/astronomy';\nimport { isEclipsed, getChargeState, getNetCurrent } from '../Util/power';\nimport { SIM_LENGTH, BEAM_DISTANCE } from '../Util/constants';\n\nfunction getTimeArray(initial, length, frames) {\n  const initialMillisecs = initial.getTime();\n  const mspf = length / frames;\n  return Array.from({ length: frames }, (value, index) => {\n    const time = initialMillisecs + index * mspf;\n    return time;\n  });\n}\n\nfunction getSatellitePositions(satellite, timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getOrbitAtTime(satellite, new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getSunPositions(timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getSunPosition(new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getEarthRotationAngles(timeArray) {\n  return timeArray.map((time) => getEarthRotationAngle(time));\n}\n\nfunction getEclipsedArray(satellite, sun, timeArray) {\n  return timeArray.map((time, index) => {\n    const satPosition = {\n      x: satellite.positions.x[index],\n      y: satellite.positions.y[index],\n      z: satellite.positions.z[index],\n    };\n\n    const sunPosition = {\n      x: sun.x[index],\n      y: sun.y[index],\n      z: sun.z[index],\n    };\n    return isEclipsed(satPosition, sunPosition);\n  });\n}\n\nfunction getCurrentDuties(duties, timeArray) {\n  return timeArray.map((time) => {\n    let currentDuty = 0;\n    duties.forEach((duty, index) => {\n      if (duty.type === 'power storing') return;\n      duty.intervals.forEach((cycle) => {\n        if ((time >= cycle.start) && (time <= cycle.end)) {\n          if (currentDuty === 0 || (duty.priority < duties[currentDuty].priority)) {\n            currentDuty = index;\n          }\n        }\n      });\n    });\n    return currentDuty;\n  });\n}\n\nfunction getBeams(spacePower, customers, timeArray) {\n  return customers.map((customer) => {\n    const beamName = `${spacePower.name} - ${customer.name}`;\n    const distances = timeArray.map((time, index) => {\n      const spacePowerPosition = {\n        x: spacePower.positions.x[index],\n        y: spacePower.positions.y[index],\n        z: spacePower.positions.z[index],\n      };\n      const customerPosition = {\n        x: customer.positions.x[index],\n        y: customer.positions.y[index],\n        z: customer.positions.z[index],\n      };\n      return getDistance(spacePowerPosition, customerPosition);\n    });\n    const activated = distances.map((distance) => {\n      if ((distance * earthRadius) < BEAM_DISTANCE) return true;\n      return false;\n    });\n    return {\n      name: beamName,\n      distances,\n      activated,\n      customerId: customer.id,\n      spacePowerId: spacePower.id,\n      id: uuidv4(),\n    };\n  });\n}\n\nfunction getBeamDuties(beams, timeArray) {\n  return timeArray.map((time, index) => (beams.reduce((prev, current) => current.activated[index] || prev, false) ? 1 : 0));\n}\n\nfunction getSource(satellite, beams, index) {\n  let hasBeam;\n  if (beams) {\n    const satBeams = beams.filter((b) => b.customerId === satellite.id);\n    hasBeam = satBeams.reduce((prev, current) => current.activated[index] || prev, false);\n  } else {\n    hasBeam = false;\n  }\n\n  const hasSun = !satellite.performance.isEclipsed[index];\n\n  if (!hasSun && hasBeam) return 'beam';\n  if (hasSun && hasBeam) return 'sun and beam';\n  if (!hasSun && !hasBeam) return 'eclipsed';\n  if (hasSun && !hasBeam) return 'sun';\n}\n\nfunction getSources(satellite, beams, timeArray) {\n  return timeArray.map((time, index) => getSource(satellite, beams, index));\n}\n\nfunction getChargeStates(satellite, timeArray, hasBeams = true) {\n  const delta = ((SIM_LENGTH / (60 * 60 * 1000)) / timeArray.length);\n  let chargeState = 1;\n  return timeArray.map((time, index) => {\n    let source = satellite.performance.sources[index];\n    if (hasBeams === false) {\n      if (source === 'sun and beam') source = 'sun';\n      if (source === 'beam') source = 'eclipsed';\n    }\n    chargeState = getChargeState(satellite.params, satellite.performance.currentDuties[index], source, chargeState, delta);\n    if (chargeState > 1) return 1;\n    if (chargeState < 0) return 0;\n    return chargeState;\n  });\n}\n\nfunction getDischargeSaved(satellite) {\n  let timeCharged = 0;\n  const totalCurrentBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    return netCurrent + prev;\n  }, 0);\n  const totalDischargeBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    if (netCurrent < 0) return netCurrent + prev;\n    return prev;\n  }, 0);\n  const totalCurrentNoBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    let sourceNoBeams = source;\n    if (source === 'sun and beam') {\n      sourceNoBeams = 'sun';\n      timeCharged += 1;\n    } else if (source === 'beam') {\n      timeCharged += 1;\n      sourceNoBeams = 'eclipsed';\n    }\n    const netCurrentNoBeams = getNetCurrent(satellite.params, sourceNoBeams, currentDuty);\n    return netCurrentNoBeams + prev;\n  }, 0);\n  const frames = satellite.performance.sources.length;\n  const totalHours = (SIM_LENGTH / (1000 * 60 * 60)) / frames;\n  const totalDischarge = Math.abs(totalDischargeBeams * totalHours);\n  const dischargeSaved = (totalCurrentBeams - totalCurrentNoBeams) * totalHours;\n  timeCharged = ((timeCharged / frames) * SIM_LENGTH) / (1000 * 60);\n  return [totalDischarge, dischargeSaved, timeCharged];\n}\n\nfunction getLowestChargeState(satellite) {\n  const lowestBeams = satellite.performance.chargeState.reduce((prev, current) => (current < prev ? current : prev), 1);\n  const lowestNoBeams = satellite.performance.chargeStateNoBeams.reduce((prev, current) => (current < prev ? current : prev), 1);\n  return [lowestBeams, lowestNoBeams];\n}\n\nexport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEarthRotationAngles,\n  getEclipsedArray,\n  getCurrentDuties,\n  getSources,\n  getChargeStates,\n  getBeams,\n  getBeamDuties,\n  getDischargeSaved,\n  getLowestChargeState,\n};\n","/* eslint-disable prefer-arrow-callback */\n/* eslint-disable no-restricted-globals */\nimport { expose } from 'threads/worker';\nimport {\n  simulateBatteries, simulateConstellations, simulateSpacePowers,\n} from '../mission';\n\nlet mission;\nconst fitnessWorker = {\n  initialize(partialMission) {\n    mission = partialMission;\n    return true;\n  },\n  calculate(req) {\n    return new Promise((resolve) => {\n      try {\n        const [spacePowers, beams] = simulateSpacePowers(\n          mission.time,\n          mission.sun,\n          req.constellations,\n          mission.satellites.customers,\n        );\n        simulateBatteries(mission.satellites.customers, mission.time, beams);\n        const constellations = simulateConstellations(\n          mission.time,\n          mission.constellations,\n          mission.satellites.customers,\n          spacePowers,\n        );\n        resolve(constellations[0].summary.dischargeSaved);\n      } catch (e) {\n        resolve(0);\n      }\n    });\n  },\n};\n\nexpose(fitnessWorker);\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-continue */\n/* eslint-disable no-console */\n/* eslint-disable import/prefer-default-export */\nimport {\n  pi,\n  tumin,\n  deg2rad,\n  earthRadius,\n} from 'satellite.js/lib/constants';\n\nimport { jday, days2mdhms } from 'satellite.js/lib/ext';\n\nimport sgp4init from 'satellite.js/lib/propagation/sgp4init';\n\nimport * as satelliteUtils from 'satellite.js';\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\nfunction extractTLE(longstr1, longstr2) {\n  const orbitElements = {};\n\n  orbitElements.epochYear = parseInt(longstr1.substring(18, 20), 10);\n  orbitElements.epochDays = parseFloat(longstr1.substring(20, 32));\n  orbitElements.meanMotionDot = parseFloat(longstr1.substring(33, 43));\n  orbitElements.meanMotionDoubleDot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  orbitElements.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n\n  // satrec.satnum = longstr2.substring(2, 7);\n  orbitElements.inclination = parseFloat(longstr2.substring(8, 16));\n  orbitElements.rightAscension = parseFloat(longstr2.substring(17, 25));\n  orbitElements.eccentricity = parseFloat(`.${longstr2.substring(26, 33)}`);\n  orbitElements.perigee = parseFloat(longstr2.substring(34, 42));\n  orbitElements.meanAnomaly = parseFloat(longstr2.substring(43, 51));\n  orbitElements.meanMotion = parseFloat(longstr2.substring(52, 63));\n  let year;\n  if (orbitElements.epochYear < 57) {\n    year = orbitElements.epochYear + 2000;\n  } else {\n    year = orbitElements.epochYear + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, orbitElements.epochDays);\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  orbitElements.epoch = new Date(year, mon, day, hr, minute, sec);\n\n  return orbitElements;\n}\n\nfunction daysIntoYear(date) {\n  return (\n    (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n      - Date.UTC(date.getFullYear(), 0, 0))\n    / 24\n    / 60\n    / 60\n    / 1000\n  );\n}\n\nfunction generateTLE(orbitElements) {\n  const {\n    epoch,\n    meanMotionDot,\n    bstar,\n    inclination,\n    rightAscension,\n    eccentricity,\n    perigee,\n    meanAnomaly,\n    meanMotion,\n  } = orbitElements;\n  let epochYr = String(epoch.getYear());\n  if (epochYr > 100) epochYr = epochYr.substring(1);\n\n  let epochDay = daysIntoYear(epoch);\n  if (epochDay < 100) epochDay = `0${epochDay}`;\n\n  const epochFraction = String(\n    (\n      epoch.getHours() / 24\n      + epoch.getMinutes() / (60 * 24)\n      + epoch.getSeconds() / (60 * 60 * 24)\n    ).toFixed(8),\n  ).substring(1);\n\n  let meanMotionDotString = String(\n    Number(meanMotionDot).toFixed(8),\n  ).substring(1);\n  if (meanMotionDot < 0) { meanMotionDotString = `-${meanMotionDotString.substring(1)}`; }\n  if (meanMotionDot >= 0) { meanMotionDotString = ` ${meanMotionDotString}`; }\n\n  let bstarMant = String(Number(bstar).toExponential(5))\n    .split('.')\n    .join('')\n    .substring(0, 6);\n  if (bstar >= 0) bstarMant = ` ${bstarMant.substring(0, 5)}`;\n  let bstarExp = 0;\n  if (Number(bstar) !== 0) bstarExp = Math.ceil(Math.log10(Math.abs(bstar)));\n  else bstarExp = '+0';\n\n  const tle1 = `1 00000C 00000A   ${epochYr}${epochDay}${epochFraction} ${meanMotionDotString}  00000-0 ${bstarMant}${bstarExp} 0  0000`;\n  const inclinationString = String(Number(inclination).toFixed(4));\n  // if (inclination < 100) inclinationString = ` ${inclinationString}`;\n\n  const rightAscensionString = String(Number(rightAscension).toFixed(4));\n  // if (rightAscension < 100) { rightAscensionString = ` ${rightAscensionString}`; }\n\n  const eccentricityString = String(\n    Number(eccentricity).toFixed(8),\n  ).substring(2, 9);\n  let perigeeString = String(Number(perigee).toFixed(4));\n  if (perigee < 100) perigeeString = ` ${perigeeString}`;\n\n  const meanAnomalyString = String(Number(meanAnomaly).toFixed(4));\n  // if (meanAnomalyString < 100) { meanAnomalyString = ` ${meanAnomalyString}`; }\n\n  const meanMotionString = String(Number(meanMotion).toPrecision(9));\n  const tle2 = `2 00000 ${inclinationString.padStart(8)} ${rightAscensionString.padStart(8)} ${eccentricityString} ${perigeeString.padStart(8)} ${meanAnomalyString} ${meanMotionString.padStart(13)}    00`;\n\n  return {\n    tle1,\n    tle2,\n  };\n}\n\nfunction twoline2satrec(longstr1, longstr2) {\n  const opsmode = 'i';\n  const xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n  let year = 0;\n\n  const satrec = {};\n  satrec.error = 0;\n\n  satrec.satnum = longstr1.substring(2, 7);\n\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  satrec.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n  // satrec.satnum = longstr2.substring(2, 7);\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(`.${longstr2.substring(26, 33)}`);\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63));\n  // ---- find no, ndot, nddot ----\n  satrec.notle = satrec.no;\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n  // ---- convert to sgp4 units ----\n  satrec.a = (satrec.no * tumin) ** (-2.0 / 3.0);\n  satrec.ndottle = satrec.ndot;\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n  satrec.nddot /= xpdotp * 1440.0 * 1440;\n\n  // ---- find standard orbital elements ----\n  satrec.inclotle = satrec.inclo;\n  satrec.inclo *= deg2rad;\n  satrec.nodeotle = satrec.nodeo;\n  satrec.nodeo *= deg2rad;\n  satrec.argpotle = satrec.argpo;\n  satrec.argpo *= deg2rad;\n  satrec.motle = satrec.mo;\n  satrec.mo *= deg2rad;\n\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0;\n\n  // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, satrec.epochdays);\n\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec);\n  satrec.epochdate = new Date(year, mon, day, hr, minute, sec);\n  satrec.epochdatetimelocal = new Date(\n    satrec.epochdate.getTime() - satrec.epochdate.getTimezoneOffset() * 60000,\n  ).toISOString().substring(0, 19);\n\n  //  ---------------- initialize the orbit at sgp4epoch -------------------\n  sgp4init(satrec, {\n    opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo,\n  });\n\n  return satrec;\n}\n\nfunction getCorsFreeUrl(url) {\n  return `https://api.allorigins.win/raw?url=${url}`;\n}\n\nfunction parseTLEs(fileContent) {\n  const result = [];\n  const lines = fileContent.split('\\n');\n  if (lines < 2) throw new Error('Error parsing TLE');\n  let current = null;\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i].trim();\n    if (line.length === 0) continue;\n\n    if (line[0] !== '1' && line[0] !== '2') {\n      current = {\n        name: line,\n      };\n    } else if (line[0] === '1') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle1: line },\n      };\n    } else if (line[0] === '2') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle2: line },\n      };\n      result.push(current);\n    } else throw new Error('Error parsing TLE');\n  }\n\n  return result;\n}\n\nfunction loadTLEsJSON(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => JSON.parse(text));\n    }\n  });\n}\n\nfunction loadTLEs(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => {\n        const satellites = parseTLEs(text);\n        console.log(text, satellites);\n        return satellites;\n      });\n    }\n  });\n}\n\nconst toThree = (v) => ({\n  x: v.x / earthRadius,\n  y: v.z / earthRadius,\n  z: -v.y / earthRadius,\n});\n\nfunction getPositionFromTLE(satellite, date) {\n  const positionVelocity = satelliteUtils.propagate(\n    satellite.orbit,\n    date,\n  );\n  const positionEci = positionVelocity.position;\n  return toThree(positionEci);\n}\n\nfunction getOrbitAtTime(satellite, time) {\n  const pos = getPositionFromTLE(satellite, time);\n  return { x: pos.x, y: pos.y, z: pos.z };\n}\n\nfunction getSunPosition(time) {\n  const N = time.getTime() / 86400000 + 2440587 - 2451545;\n  let L = 4.89495042 + 0.0172027923937 * N;\n  if (L > 2 * Math.PI) L -= 2 * Math.PI;\n  let g = 6.240040768 + 0.0172019703436 * N;\n  if (g > 2 * Math.PI) g -= 2 * Math.PI;\n  const longitude = L + 0.033423055 * Math.sin(g) + 0.0003490659 * Math.sin(g);\n  const distance = 1.00014 - 0.01671 * Math.cos(g) - 0.00014 * Math.cos(2 * g)\n  * (149597870.7 / earthRadius);\n  const obliquity = 0.40907027 - 6.981317008e-9 * N;\n  const y = (distance * Math.sin(obliquity) * Math.sin(longitude));\n\n  const x = (distance * Math.cos(longitude));\n  const z = -(distance * Math.cos(obliquity) * Math.sin(longitude));\n\n  return { x, y, z };\n}\n\nfunction getEarthRotationAngle(date) {\n  const JD = date / 86400000 + 2440587 - 2451545;\n  return 2 * Math.PI * (0.779057273264 + 1.002737811911355 * JD);\n}\n\nfunction getDistance(position1, position2) {\n  const a = position1.x - position2.x;\n  const b = position1.y - position2.y;\n  const c = position1.z - position2.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport {\n  twoline2satrec,\n  generateTLE,\n  extractTLE,\n  getOrbitAtTime,\n  getSunPosition,\n  getEarthRotationAngle,\n  getDistance,\n  parseTLEs,\n  getCorsFreeUrl,\n  loadTLEs,\n  loadTLEsJSON,\n};\n","const SIM_LENGTH = 24 * 60 * 60 * 2 * 1000; // ms\nconst FPmS = 120 / 1000;\n\nconst BEAM_DISTANCE = 1000;\nconst MIN_SPEED = 600;\nconst FRAMES = SIM_LENGTH * (FPmS / MIN_SPEED);\n\nexport {\n  FPmS,\n  SIM_LENGTH,\n  MIN_SPEED,\n  FRAMES,\n  BEAM_DISTANCE,\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/prefer-default-export */\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport { Vector3 } from 'three';\n\nconst earthPosition = new Vector3(0, 0, 0);\nconst sunPosition = new Vector3();\nconst satPosition = new Vector3();\nconst sunEarth = new Vector3();\nconst sunSat = new Vector3();\n\nfunction isEclipsed(satellite, sun) {\n  sunPosition.fromArray([sun.x, sun.y, sun.z]);\n  satPosition.fromArray([satellite.x, satellite.y, satellite.z]);\n\n  sunEarth.subVectors(earthPosition, sunPosition);\n  sunSat.subVectors(satPosition, earthPosition);\n\n  const angle = sunEarth.angleTo(sunSat);\n\n  const sunEarthDistance = sunPosition.distanceTo(earthPosition);\n  const sunSatDistance = sunPosition.distanceTo(satPosition);\n  const limbAngle = Math.atan2(earthRadius, sunEarthDistance);\n\n  if (angle > limbAngle || sunSatDistance < sunEarthDistance) {\n    return false;\n  }\n  return true;\n}\n\nfunction getNetCurrent(params, source, currentDuty) {\n  const powerProfile = params.load.powerProfiles[source];\n  return powerProfile[currentDuty];\n}\n\nfunction getChargeState(\n  params,\n  currentDuty,\n  source,\n  chargeState,\n  delta,\n) {\n  const netCurrent = getNetCurrent(params, source, currentDuty);\n  const { capacity } = params.battery;\n\n  if (chargeState >= 1.0 && netCurrent >= 0) {\n    return 1;\n  }\n\n  if (chargeState <= 0 && netCurrent <= 0) {\n    return 0;\n  }\n\n  return (\n    (\n      (chargeState * capacity)\n      + (delta * netCurrent)\n    ) / capacity\n  );\n}\n\nexport { isEclipsed, getChargeState, getNetCurrent };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [546,752,119], () => (__webpack_require__(35582)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t582: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","SatelliteSchema","Yup","shape","name","min","max","trim","color","matches","orbit","tle","list","meanMotionDot","required","bstar","inclination","rightAscension","eccentricity","perigee","meanAnomaly","meanMotion","power","pv","voltage","currentDensity","area","powerStoringConsumption","preset","oneOf","battery","capacity","duties","of","type","priority","integer","consumption","duration","when","is","then","cycles","simulateSpacePowers","constellations","payload","satelliteCount","satellites","spacePowersCount","spacePowerIndices","offsets","time","sun","customers","spacePowers","forEach","constellation","indices","generateIndices","length","counts","getIndexCounts","getOffsets","satellite","index","offset","push","createPowerSatellite","initializeSpacePowers","beams","spacePower","positions","getSatellitePositions","params","satBeams","getBeams","filter","c","performance","currentDuties","getBeamDuties","isEclipsed","getEclipsedArray","sources","getSources","chargeState","getChargeStates","simulateBatteries","customer","chargeStateNoBeams","totalDischarge","dischargeSaved","timeCharged","getDischargeSaved","lowestChargeStateBeams","lowestChargeStateNoBeams","getLowestChargeState","summary","simulateConstellations","map","id","find","isCustomer","t","reduce","prev","current","PV_SOURCES","sunOnly","efficiency","beamOnly","sunAndBeam","eclipsed","POWER_SAT_REQUEST","getDutyIntervals","duty","period","Number","interval","totalCycles","Math","floor","SIM_LENGTH","Array","from","value","start","valueOf","end","newOrbit","Object","entries","tles","generateTLE","epoch","Date","twoline2satrec","tle1","tle2","getOrbitAtTime","err","error","Error","PI","no","intervals","epochdate","unshift","powerProfiles","newPowerProfiles","pvSource","pvPower","loadProfiles","netCurrent","generatePowerProfiles","load","createSatellite","spacePowerColor","uuidv4","customersCount","ratio","v","i","count","multiplier","newOffsets","timeArray","x","y","z","pos","satPosition","sunPosition","beamName","distances","spacePowerPosition","customerPosition","getDistance","activated","distance","earthRadius","BEAM_DISTANCE","customerId","spacePowerId","hasBeam","b","hasSun","getSource","hasBeams","delta","source","getChargeState","totalCurrentBeams","currentDuty","getNetCurrent","totalDischargeBeams","totalCurrentNoBeams","sourceNoBeams","frames","totalHours","abs","mission","fitnessWorker","initialize","partialMission","calculate","req","Promise","resolve","e","expose","orbitElements","epochYr","String","getYear","substring","epochDay","date","UTC","getFullYear","getMonth","getDate","epochFraction","getHours","getMinutes","getSeconds","toFixed","meanMotionDotString","bstarMant","toExponential","split","join","bstarExp","ceil","log10","inclinationString","rightAscensionString","eccentricityString","perigeeString","meanAnomalyString","meanMotionString","toPrecision","padStart","longstr1","longstr2","xpdotp","pi","year","satrec","satnum","epochyr","parseInt","epochdays","parseFloat","ndot","nddot","inclo","nodeo","ecco","argpo","mo","notle","a","tumin","ndottle","inclotle","deg2rad","nodeotle","argpotle","motle","alta","altp","mdhmsResult","days2mdhms","mon","day","hr","minute","sec","jdsatepoch","jday","epochdatetimelocal","getTime","getTimezoneOffset","toISOString","sgp4init","opsmode","satn","xbstar","xecco","xargpo","xinclo","xmo","xno","xnodeo","satelliteUtils","position","getPositionFromTLE","position1","position2","sqrt","earthPosition","Vector3","sunEarth","sunSat","fromArray","subVectors","angle","angleTo","sunEarthDistance","distanceTo","sunSatDistance","atan2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","__webpack_exports__","O","result","chunkIds","fn","notFulfilled","Infinity","fulfilled","j","keys","every","key","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","f","chunkId","all","promises","u","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","nmd","paths","children","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","p","installedChunks","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","data","moreModules","runtime","pop"],"sourceRoot":""}