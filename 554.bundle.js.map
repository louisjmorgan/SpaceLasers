{"version":3,"file":"554.bundle.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/startup chunk dependencies","webpack:///./src/Model/mission.js","webpack:///./src/Model/optimizer.js","webpack:///./src/Model/satellite.js","webpack:///./src/Model/simulation.js","webpack:///./src/Model/workers/optimizeWorker.js","webpack:///./src/Util/astronomy.js","webpack:///./src/Util/constants.js","webpack:///./src/Util/power.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/importScripts chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([546,869,752,105].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","/* eslint-disable consistent-return */\n/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\nimport * as Yup from 'yup';\nimport { generateTLE, twoline2satrec } from '../Util/astronomy';\nimport { FRAMES, SIM_LENGTH } from '../Util/constants';\nimport {\n  createSatellite, createPowerSatellite, getOffsets, getIndexCounts, generateIndices,\n} from './satellite';\nimport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEclipsedArray,\n  getCurrentDuties,\n  getBeams,\n  getBeamDuties,\n  getChargeStates,\n  getDischargeSaved,\n  getEarthRotationAngles,\n  getSources,\n  getLowestChargeState,\n} from './simulation';\n\nconst SatelliteSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .trim(),\n  color: Yup.string()\n    .trim()\n    .matches(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i),\n  orbit: Yup.object().shape({\n    tle: Yup.string(),\n    list: Yup.string(),\n    meanMotionDot: Yup.number()\n      .min(-1, 'Must be more than -1')\n      .max(1, 'Must be less than 1')\n      .required('meanMotionDot is required'),\n    bstar: Yup.number()\n      .min(-2, 'Must be between -2 and 2')\n      .max(2, 'Must be between -2 and 2')\n      .required('bstar is required'),\n    inclination: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('inclination is required'),\n    rightAscension: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('right ascension is required'),\n    eccentricity: Yup.number()\n      .min(0, 'Must be between 0 and 1')\n      .max(1, 'Must be between 0 and 1')\n      .required('eccentricity is required'),\n    perigee: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('perigee is required'),\n    meanAnomaly: Yup.number()\n      .min(0, 'Must be 0-360°')\n      .max(360, 'Must be 0-360°')\n      .required('mean anomaly is required'),\n    meanMotion: Yup.number()\n      .min(0, 'Must be greater than 0')\n      .max(16, 'Must be less than 16')\n      .required('mean motion is required'),\n  }),\n  power: Yup.object().shape({\n    pv: Yup.object().shape({\n      voltage: Yup.number()\n        .min(0, 'Must be positive')\n        .required('pv voltage is required'),\n      currentDensity: Yup.number()\n        .min(0, 'Must be positive')\n        .required('pv current density is required'),\n      area: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('pv area is required'),\n      powerStoringConsumption: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('Power storing consumption is required'),\n      preset: Yup.string()\n        .oneOf(['small', 'medium', 'large', 'custom']),\n    }),\n    battery: Yup.object().shape({\n      voltage: Yup.number()\n        .min(0, 'Must be positive')\n        .required('battery voltage is required'),\n      capacity: Yup.number()\n        .min(0, 'Must be greater than 0')\n        .required('battery capacity is required'),\n      preset: Yup.string()\n        .oneOf(['small', 'medium', 'large', 'custom']),\n    }),\n  }),\n  duties: Yup.array()\n    .of(\n      Yup.object().shape({\n        type: Yup.string()\n          .oneOf(['cyclical'])\n          .required('Type is required'),\n        name: Yup.string()\n          .min(2, 'Too Short!')\n          .max(30, 'Too Long!')\n          .required('required!'),\n        priority: Yup.number()\n          .integer()\n          .min(1)\n          .required('Priority is required'),\n        consumption: Yup.number()\n          .min(0, 'Must be positive')\n          .required('Consumption is required'),\n        duration: Yup.number()\n          .min(0, 'Must be positive')\n          .when(\n            'type',\n            {\n              is: 'cyclical',\n              then: Yup.number().required('Duration is required'),\n            },\n          ),\n        cycles: Yup.number()\n          .min(0, 'Must be positive')\n          .when(\n            'type',\n            {\n              is: 'cyclical',\n              then: Yup.number().required('Cycles is required'),\n            },\n          ),\n      }),\n    ),\n});\n\nconst MissionSchema = Yup.object().shape({\n  constellations: Yup.array().of(\n    Yup.object().shape({\n      name: Yup.string()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .trim(),\n      list: Yup.string(),\n      payload: SatelliteSchema,\n      satelliteCount: Yup.number().min(0).required('Satellite count is required'),\n      satellites: Yup.array().of(SatelliteSchema),\n      spacePowersCount: Yup.number()\n        .integer()\n        .min(0, 'Must be an integer greater than or equal to 0'),\n      spacePowerIndices: Yup.array().of(\n        Yup.number()\n          .min(0),\n      ),\n      offsets: Yup.object().shape({\n        inclination: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('inclination is required'),\n        rightAscension: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('right ascension is required'),\n        eccentricity: Yup.number()\n          .min(0, 'Must be between 0 and 1')\n          .max(1, 'Must be between 0 and 1')\n          .required('eccentricity is required'),\n        perigee: Yup.number()\n          .min(0, 'Must be 0-36°')\n          .max(36, 'Must be 0-36°')\n          .required('perigee is required'),\n        meanAnomaly: Yup.number()\n          .min(0, 'Must be 0-360°')\n          .max(360, 'Must be 0-360°')\n          .required('mean anomaly is required'),\n        meanMotion: Yup.number()\n          .min(0, 'Must be greater than 0')\n          .max(16, 'Must be less than 16')\n          .required('mean motion is required'),\n      }),\n    }),\n  ),\n});\n\nconst simulateBaseData = (baseSatellite, length, frames) => {\n  const tles = generateTLE({\n    ...baseSatellite.orbit,\n    epoch: new Date(baseSatellite.orbit.epoch),\n  });\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  const time = getTimeArray(orbit.epochdate, length, frames);\n  const sun = getSunPositions(time);\n  const earth = getEarthRotationAngles(time);\n  return [time, sun, earth];\n};\n\nconst initializeConstellations = (constellations) => constellations.map((constellation) => ({\n  ...constellation,\n  satellites: constellation.satellites.map((satellite) => satellite.id),\n}));\n\nconst initializeCustomers = (constellations, time, sun) => {\n  const customers = [];\n  constellations.forEach((constellation) => {\n    constellation.satellites.forEach((satellite) => {\n      customers.push(createSatellite(satellite, constellation.id));\n    });\n  });\n  customers.forEach((customer) => {\n    customer.positions = getSatellitePositions(customer.params, time);\n    customer.performance = {\n      currentDuties: getCurrentDuties(customer.params.load.duties, time),\n      isEclipsed: getEclipsedArray(customer, sun, time),\n    };\n  });\n  return customers;\n};\n\nconst initializeSpacePowers = (constellations) => {\n  const spacePowers = [];\n  constellations.forEach((constellation) => {\n    let indices;\n    if (!constellation.spacePowerIndices) indices = generateIndices(constellation.spacePowersCount, constellation.satellites.length);\n    else indices = constellation.spacePowerIndices;\n    const counts = getIndexCounts(constellation.satellites.length, indices);\n    const offsets = getOffsets(constellation.offsets, counts);\n    constellation.satellites.forEach((satellite, index) => {\n      if (!offsets[index]) return;\n      return offsets[index].forEach((offset) => {\n        spacePowers.push(createPowerSatellite(\n          `Space Power ${index + 1}`,\n          satellite.orbit,\n          offset,\n          constellation,\n        ));\n      });\n    });\n  });\n\n  return spacePowers;\n};\n\nconst simulateSpacePowers = (time, sun, constellations, customers) => {\n  const spacePowers = initializeSpacePowers(constellations);\n  const beams = [];\n  spacePowers.forEach((spacePower) => {\n    spacePower.positions = getSatellitePositions(spacePower.params, time);\n    const satBeams = getBeams(spacePower, customers.filter((c) => c.constellation === spacePower.constellation), time);\n    spacePower.performance = {\n      currentDuties: getBeamDuties(satBeams, time),\n      isEclipsed: getEclipsedArray(spacePower, sun, time),\n    };\n    spacePower.performance.sources = getSources(spacePower, satBeams, time);\n    spacePower.performance.chargeState = getChargeStates(spacePower, time);\n    beams.push(...satBeams);\n  });\n  return [spacePowers, beams];\n};\n\nconst simulateBatteries = (customers, time, beams) => {\n  customers.forEach((customer) => {\n    customer.performance.sources = getSources(customer, beams, time);\n    customer.performance = {\n      ...customer.performance,\n      chargeState: getChargeStates(customer, time),\n      chargeStateNoBeams: getChargeStates(customer, time, false),\n    };\n    const [totalDischarge, dischargeSaved, timeCharged] = getDischargeSaved(customer);\n    const [lowestChargeStateBeams, lowestChargeStateNoBeams] = getLowestChargeState(customer);\n    customer.summary = {\n      totalDischarge,\n      dischargeSaved,\n      timeCharged,\n      lowestChargeStateBeams,\n      lowestChargeStateNoBeams,\n    };\n  });\n};\n\nconst simulateConstellations = (time, constellations, customers, spacePowers) => constellations.map((constellation) => {\n  const satellites = constellation.satellites.map((id) => customers.find((customer) => customer.id === id));\n  return {\n    ...constellation,\n    isCustomer: true,\n    spacePowers: spacePowers.filter((spacePower) => spacePower.constellation === constellation.id).map((spacePower) => spacePower.id),\n    performance: {\n      chargeState: time.map((t, index) => satellites.reduce((prev, current) => prev + current.performance.chargeState[index], 0) / customers.length),\n      chargeStateNoBeams: time.map((t, index) => satellites.reduce((prev, current) => prev + current.performance.chargeStateNoBeams[index], 0) / customers.length),\n    },\n    summary: {\n      // totalDischarge: satellites.reduce((prev, current) => prev + current.summary.totalDischarge, 0),\n      dischargeSaved: satellites.reduce((prev, current) => prev + current.summary.dischargeSaved, 0),\n      timeCharged: satellites.reduce((prev, current) => prev + current.summary.timeCharged, 0),\n      lowestChargeStateBeams: satellites.reduce((prev, current) => {\n        const c = current.summary.lowestChargeStateBeams;\n        return prev < c ? prev : c;\n      }, satellites[0].summary.lowestChargeStateBeams),\n      lowestChargeStateNoBeams: satellites.reduce((prev, current) => {\n        const c = current.summary.lowestChargeStateNoBeams;\n        return prev < c ? prev : c;\n      }, satellites[0].summary.lowestChargeStateNoBeams),\n    },\n  };\n});\n\nconst handleMissionRequest = (req, length = SIM_LENGTH, frames = FRAMES) => {\n  const [time, sun, earth] = simulateBaseData(req.constellations[0].satellites[0], length, frames);\n  let constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  const [spacePowers, beams] = simulateSpacePowers(time, sun, req.constellations, customers);\n  simulateBatteries(customers, time, beams);\n  constellations = simulateConstellations(time, constellations, customers, spacePowers);\n  return {\n    success: true,\n    time,\n    satellites: {\n      customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n    sun,\n    earth,\n  };\n};\n\nconst generatePartialMission = (req, length = SIM_LENGTH, frames = FRAMES) => {\n  const [time, sun, earth] = simulateBaseData(req.constellations[0].satellites[0], length, frames);\n  const constellations = initializeConstellations(req.constellations);\n  const customers = initializeCustomers(req.constellations, time, sun);\n  return {\n    time,\n    constellations,\n    satellites: {\n      customers,\n    },\n    sun,\n    earth,\n  };\n};\n\nconst handleOptimizerMission = (mission, req) => {\n  const [spacePowers, beams] = simulateSpacePowers(\n    mission.time,\n    mission.sun,\n    req.constellations,\n    mission.satellites.customers,\n  );\n  simulateBatteries(mission.satellites.customers, mission.time, beams);\n  const constellations = simulateConstellations(\n    mission.time,\n    mission.constellations,\n    mission.satellites.customers,\n    spacePowers,\n  );\n  return {\n    ...mission,\n    success: true,\n    satellites: {\n      customers: mission.satellites.customers,\n      spacePowers,\n    },\n    constellations,\n    beams,\n  };\n};\n\nexport {\n  handleMissionRequest, simulateBaseData, initializeConstellations, initializeCustomers,\n  simulateSpacePowers, simulateBatteries, simulateConstellations, generatePartialMission,\n  handleOptimizerMission, initializeSpacePowers,\n  MissionSchema,\n};\n","/* eslint-disable no-restricted-globals */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-await-in-loop */\n/* eslint-disable consistent-return */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-param-reassign */\n/* eslint-disable default-case */\nimport { Genetic, Select } from 'async-genetic';\nimport { spawn, Pool, Worker } from 'threads';\nimport { FRAMES, SIM_LENGTH } from '../Util/constants';\nimport {\n  generatePartialMission, initializeSpacePowers,\n} from './mission';\n// import { twoline2satrec, generateTLE, getOrbitAtTime } from '../Util/astronomy';\n\nconst randomOrbit = () => [\n  Math.random() * 16, // inclination\n  Math.random() * 16, // right ascensions\n  Math.random() * 16, // perigee\n  Math.random() * 16, // mean anomaly\n  Math.random() * 1, // mean motion\n  (Math.random()) * 0.1, // ecccentricity (0,1)\n  // (Math.random() - 0.5) * 2, // meanMotionDot (-1,1)\n  // (Math.random() - 0.5) * 4, // bstar (-2, 2)\n];\n\nasync function* solve(genetic, GENERATIONS, log) {\n  let generations = 0;\n  await genetic.seed();\n  let best;\n  for (let i = 0; i <= GENERATIONS; i++) {\n    if (log) {\n      console.count('gen');\n    }\n\n    await genetic.estimate();\n    const bestOne = genetic.best()[0];\n    best = genetic.best();\n    generations += 1;\n    yield {\n      best,\n      generations,\n    };\n    if (log) {\n      console.log(`${bestOne.entity} - ${bestOne.fitness}`);\n    }\n\n    await genetic.breed();\n  }\n  return { best, generations };\n}\n\nasync function* optimizeSpacePower(req) {\n  const constellation = req.constellations[0];\n  const GENERATIONS = constellation.optimization.generations;\n  const POPULATION = constellation.optimization.population;\n  const partialMission = generatePartialMission(req, SIM_LENGTH, FRAMES / 120);\n  const pool = Pool(async () => {\n    const worker = await spawn(new Worker(new URL('./workers/fitnessWorker.js', import.meta.url)));\n    worker.initialize(partialMission);\n    return worker;\n  }, constellation.optimization.threads);\n  const testOrbit = (elements) => {\n    const offsets = {\n      inclination: elements[0],\n      rightAscension: elements[1],\n      perigee: elements[2],\n      meanAnomaly: elements[3],\n      meanMotion: elements[4],\n      eccentricity: elements[5],\n      // meanMotionDot: elements[6],\n      // bstar: elements[7],\n    };\n\n    try {\n      initializeSpacePowers([{\n        ...constellation,\n        offsets,\n        spacePowerIndices: elements.slice(6),\n      }]);\n    } catch (err) {\n      const error = 'Orbital propagation failed';\n      throw new Error(error);\n    }\n  };\n\n  const randomFunction = async () => {\n    let variables = randomOrbit();\n    let success = false;\n    while (!success) {\n      try {\n        testOrbit(variables);\n        success = true;\n      } catch (e) {\n        variables = randomOrbit();\n      }\n    }\n    const indices = Array.from(\n      { length: constellation.spacePowersCount },\n      () => Math.floor(Math.random() * constellation.satellites.length),\n    );\n    variables.push(...indices);\n    return variables;\n  };\n\n  const generateMutation = (entity) => {\n    const angleDrift = ((Math.random() - 0.5) * 2) * 3;\n    const eccentricityDrift = ((Math.random() - 0.5) * 2) * 0.1;\n    // const meanMotionDotDrift = ((Math.random() - 0.5) * 2) * 0.001;\n    // const bstarDrift = ((Math.random() - 0.5) * 2) * 0.001;\n    const indexDrift = Math.floor((\n      (Math.random() - 0.5) * (constellation.satellites.length)\n    ));\n\n    const i = Math.floor(Math.random() * entity.length);\n    let newValue;\n    const newEntity = [...entity];\n\n    if (i < 5) {\n      newValue = newEntity[i] + angleDrift;\n      if (newValue > 360 || newValue < 0) newEntity[i] -= angleDrift;\n      else newEntity[i] = newValue;\n    } else if ((i === 5)) {\n      newValue = newEntity[i] + eccentricityDrift;\n      if (newValue > 1 || newValue < 0) newEntity[i] -= eccentricityDrift;\n      else newEntity[i] = newValue;\n    // } else if (i === 6) {\n    //   newValue = newEntity[i] + meanMotionDotDrift;\n    //   if (newValue > 1 || newValue < -1) newEntity[i] -= meanMotionDotDrift;\n    //   else newEntity[i] = newValue;\n    // } else if (i === 7) {\n    //   newValue = newEntity[i] + bstarDrift;\n    //   if (newValue > 2 || newValue < -2) newEntity[i] -= bstarDrift;\n    //   else newEntity[i] = newValue;\n    } else if (i > 5) {\n      newValue = newEntity[i] + indexDrift;\n      if (newValue >= constellation.satellites.length\n          || newValue < 0) newEntity[i] -= indexDrift;\n      else newEntity[i] = newValue;\n    }\n\n    return newEntity;\n  };\n\n  const mutationFunction = async (entity) => {\n    let mutation = generateMutation([...entity]);\n    let success = false;\n    while (!success) {\n      try {\n        testOrbit(mutation);\n        success = true;\n      } catch (e) {\n        mutation = generateMutation([...entity]);\n      }\n    }\n    return mutation;\n  };\n\n  // const waitFor = (delay) => new Promise((resolve) => { setTimeout(resolve, delay); });\n  const fitnessFunction = async (variables) => {\n    const offsets = {\n      inclination: variables[0],\n      rightAscension: variables[1],\n      perigee: variables[2],\n      meanAnomaly: variables[3],\n      meanMotion: variables[4],\n      eccentricity: variables[5],\n      // meanMotionDot: variables[6],\n      // bstar: variables[7],\n    };\n    const spacePowerIndices = variables.slice(6);\n    const testReq = {\n      constellations: [\n        {\n          ...constellation,\n          offsets,\n          spacePowerIndices,\n        },\n      ],\n    };\n\n    const task = pool.queue((fitness) => fitness.calculate(testReq));\n    const result = await task;\n    // let result\n    // try {\n    //   const mission = handleOptimizerMission(partialMission, testReq);\n    //   const { summary } = mission.constellations[0];\n    //   result = summary.dischargeSaved + summary.lowestChargeStateBeams;\n    // } catch (e) {\n    //   result = 0;\n    // }\n\n    return { fitness: result };\n  };\n\n  const population = [];\n\n  for (let i = 0; i < POPULATION; i++) {\n    population.push(randomFunction());\n  }\n\n  const genetic = new Genetic({\n    mutationFunction,\n    // crossoverFunction,\n    fitnessFunction,\n    randomFunction,\n    populationSize: POPULATION,\n    fittestNSurvives: 1,\n    select1: Select.Fittest,\n    select2: Select.Tournament3,\n    mutateProbablity: 1,\n    // crossoverProbablity: 0.2,\n    deduplicate: () => true,\n  });\n\n  const log = true;\n\n  const gen = solve(genetic, GENERATIONS, log);\n  let done = false;\n  let result;\n  while (!done) {\n    result = await gen.next();\n    done = result.done;\n    if (done) break;\n    yield result;\n  }\n  console.log(result);\n  const optimized = result.value.best[0].entity;\n  return {\n    done: true,\n    value: {\n      ...result.value,\n      offsets: {\n      // ...req.constellation[0].offsets,\n        inclination: optimized[0],\n        rightAscension: optimized[1],\n        perigee: optimized[2],\n        meanAnomaly: optimized[3],\n        meanMotion: optimized[4],\n        eccentricity: optimized[5],\n      },\n      indices: optimized.slice(6),\n    },\n  };\n}\n\nexport default optimizeSpacePower;\n","/* eslint-disable array-callback-return */\n/* eslint-disable consistent-return */\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  twoline2satrec,\n  generateTLE,\n  getOrbitAtTime,\n} from '../Util/astronomy';\nimport { SIM_LENGTH } from '../Util/constants';\n\nconst PV_SOURCES = {\n  sunOnly: {\n    name: 'sun',\n    efficiency: 1,\n  },\n  beamOnly: {\n    name: 'beam',\n    efficiency: 1,\n  },\n  sunAndBeam: {\n    name: 'sun and beam',\n    efficiency: 1.5,\n  },\n  eclipsed: {\n    name: 'eclipsed',\n    efficiency: 0,\n  },\n};\n\nconst POWER_SAT_REQUEST = {\n  power: {\n    pv: {\n      voltage: 4.7,\n      currentDensity: 170.5,\n      area: 0.0128,\n      powerStoringConsumption: 1.2,\n    },\n    battery: {\n      voltage: 3.6,\n      capacity: 1.125,\n    },\n  },\n  duties: [\n    {\n      name: 'beaming',\n      duration: null,\n      cycles: null,\n      consumption: 3.2,\n      type: 'space power',\n    },\n  ],\n};\n\nfunction generatePowerProfiles(pv, duties, battery) {\n  const { area, voltage, currentDensity } = pv;\n  const newPowerProfiles = [];\n  Object.entries(pv.sources).forEach((pvSource) => {\n    const current = currentDensity * pvSource[1].efficiency * area;\n    const pvPower = current * voltage;\n    const loadProfiles = [];\n    duties.forEach((duty) => {\n      const netPower = pvPower - duty.consumption;\n      const netCurrent = netPower / battery.voltage;\n      loadProfiles.push(netCurrent);\n    });\n    newPowerProfiles[pvSource[1].name] = loadProfiles;\n  });\n  return newPowerProfiles;\n}\n\nfunction getDutyIntervals(duty, period, time) {\n  const cycles = Number(duty.cycles);\n  const duration = Number(duty.duration) * 1000;\n  const interval = (period - (duration * cycles)) / cycles;\n  const totalCycles = Math.floor((SIM_LENGTH / period) * cycles);\n  return Array.from({ length: totalCycles }, (value, index) => {\n    const start = time.valueOf() + (interval * (index + 1)) + (duration * index);\n    return {\n      start,\n      end: start + duration,\n    };\n  });\n}\n\nfunction createSatellite(satellite, constellation, isCustomer = true) {\n  const tles = generateTLE({\n    ...satellite.orbit,\n    epoch: new Date(satellite.orbit.epoch),\n  });\n\n  const orbit = twoline2satrec(tles.tle1, tles.tle2);\n  try {\n    getOrbitAtTime({ orbit }, new Date());\n  } catch (err) {\n    const error = `Unable to propagate orbital parameters for ${satellite.orbit.tle}. ${\n      isCustomer ? '\\nPlease try different values or choose a TLE.' : '\\nPlease try different offsets in the power configuration menu.'}`;\n    throw new Error(error);\n  }\n\n  orbit.period = (2 * Math.PI * 60 * 1000) / orbit.no;\n\n  const pv = {\n    sources: PV_SOURCES,\n    voltage: satellite.power.pv.voltage,\n    currentDensity: satellite.power.pv.currentDensity,\n    area: satellite.power.pv.area,\n  };\n\n  const battery = {\n    voltage: satellite.power.battery.voltage,\n    capacity: satellite.power.battery.capacity,\n  };\n\n  const duties = satellite.duties.map((duty) => ({\n    name: duty.name,\n    type: duty.type,\n    priority: duty.priority,\n    consumption: Number(duty.consumption),\n    duration: (Number(duty.duration) * 1000) || null,\n    cycles: Number(duty.cycles) || null,\n    intervals: duty.type === 'cyclical' ? getDutyIntervals(duty, orbit.period, orbit.epochdate) : null,\n  }));\n\n  duties.unshift({\n    name: 'Power storing',\n    type: 'power storing',\n    consumption: satellite.power.pv.powerStoringConsumption,\n  });\n  const powerProfiles = generatePowerProfiles(pv, duties, battery);\n  return {\n    name: satellite.name,\n    color: satellite.color,\n    constellation,\n    id: satellite.id,\n    params: {\n      orbit,\n      battery,\n      pv,\n      load: {\n        powerProfiles,\n        duties,\n      },\n    },\n    isCustomer,\n  };\n}\n\nfunction createPowerSatellite(name, orbit, offsets, constellation) {\n  const newOrbit = { ...orbit };\n  Object.entries(offsets).forEach((offset) => {\n    newOrbit[offset[0]] = orbit[offset[0]] + Number(offset[1]);\n  });\n  const request = {\n    ...POWER_SAT_REQUEST,\n    name,\n    color: constellation.spacePowerColor,\n    id: uuidv4(),\n    orbit: newOrbit,\n  };\n  return createSatellite(request, constellation.id, false);\n}\n\nfunction generateIndices(spacePowersCount, customersCount) {\n  const ratio = customersCount / spacePowersCount;\n  return Array.from({ length: spacePowersCount }, (v, i) => Math.floor(ratio * i));\n}\n\nfunction getIndexCounts(customersCount, indices) {\n  return Array.from(\n    { length: customersCount },\n    (v, i) => indices.filter((index) => Number(index) === i).length,\n  );\n  // if (spacePowers === 0) return [];\n  // if (spacePowers === customers) return Array.from({ length: customers }, (v, i) => 1);\n  // if (spacePowers < customers) {\n  //   const spacing = Math.floor(customers / spacePowers);\n  //   let total = 0;\n  //   return Array.from({ length: customers }, (value, index) => {\n  //     if (index % spacing) return null;\n  //     total += 1;\n  //     if (total > spacePowers) return null;\n  //     return 1;\n  //   });\n  // }\n  // if (spacePowers > customers) {\n  //   let ratio = Math.ceil(spacePowers / customers);\n  //   let total = 0;\n  //   return Array.from(\n  //     { length: customers },\n  //     () => {\n  //       if ((total + ratio) > spacePowers) ratio = spacePowers - total;\n  //       total += 1;\n  //       return ratio;\n  //     },\n  //   );\n  // }\n}\n\nfunction getOffsets(offsets, counts) {\n  return counts.map((count) => {\n    if (count === 0) return null;\n    if (count === 1) return [offsets];\n    if (count > 1) {\n      let multiplier = 0;\n      return Array.from({ length: count }, (v, index) => {\n        if (index % 2 === 0) multiplier += 1;\n        const newOffsets = {};\n        Object.entries(offsets).forEach((offset) => {\n          newOffsets[offset[0]] = offset[1] * multiplier * ((0 - 1) ** index);\n        });\n        return newOffsets;\n      });\n    }\n  });\n}\n\nexport {\n  createSatellite, createPowerSatellite, getOffsets, generateIndices, getIndexCounts,\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable max-len */\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport {\n  getOrbitAtTime, getSunPosition, getEarthRotationAngle, getDistance,\n} from '../Util/astronomy';\nimport { isEclipsed, getChargeState, getNetCurrent } from '../Util/power';\nimport { SIM_LENGTH, BEAM_DISTANCE } from '../Util/constants';\n\nfunction getTimeArray(initial, length, frames) {\n  const initialMillisecs = initial.getTime();\n  const mspf = length / frames;\n  return Array.from({ length: frames }, (value, index) => {\n    const time = initialMillisecs + index * mspf;\n    return time;\n  });\n}\n\nfunction getSatellitePositions(satellite, timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getOrbitAtTime(satellite, new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getSunPositions(timeArray) {\n  const x = [];\n  const y = [];\n  const z = [];\n\n  timeArray.forEach((time) => {\n    const pos = getSunPosition(new Date(time));\n    x.push(pos.x);\n    y.push(pos.y);\n    z.push(pos.z);\n  });\n\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nfunction getEarthRotationAngles(timeArray) {\n  return timeArray.map((time) => getEarthRotationAngle(time));\n}\n\nfunction getEclipsedArray(satellite, sun, timeArray) {\n  return timeArray.map((time, index) => {\n    const satPosition = {\n      x: satellite.positions.x[index],\n      y: satellite.positions.y[index],\n      z: satellite.positions.z[index],\n    };\n\n    const sunPosition = {\n      x: sun.x[index],\n      y: sun.y[index],\n      z: sun.z[index],\n    };\n    return isEclipsed(satPosition, sunPosition);\n  });\n}\n\nfunction getCurrentDuties(duties, timeArray) {\n  return timeArray.map((time) => {\n    let currentDuty = 0;\n    duties.forEach((duty, index) => {\n      if (duty.type === 'power storing') return;\n      duty.intervals.forEach((cycle) => {\n        if ((time >= cycle.start) && (time <= cycle.end)) {\n          if (currentDuty === 0 || (duty.priority < duties[currentDuty].priority)) {\n            currentDuty = index;\n          }\n        }\n      });\n    });\n    return currentDuty;\n  });\n}\n\nfunction getBeams(spacePower, customers, timeArray) {\n  return customers.map((customer) => {\n    const beamName = `${spacePower.name} - ${customer.name}`;\n    const distances = timeArray.map((time, index) => {\n      const spacePowerPosition = {\n        x: spacePower.positions.x[index],\n        y: spacePower.positions.y[index],\n        z: spacePower.positions.z[index],\n      };\n      const customerPosition = {\n        x: customer.positions.x[index],\n        y: customer.positions.y[index],\n        z: customer.positions.z[index],\n      };\n      return getDistance(spacePowerPosition, customerPosition);\n    });\n    const activated = distances.map((distance) => {\n      if ((distance * earthRadius) < BEAM_DISTANCE) return true;\n      return false;\n    });\n    return {\n      name: beamName,\n      distances,\n      activated,\n      customerId: customer.id,\n      spacePowerId: spacePower.id,\n      id: uuidv4(),\n    };\n  });\n}\n\nfunction getBeamDuties(beams, timeArray) {\n  return timeArray.map((time, index) => (beams.reduce((prev, current) => current.activated[index] || prev, false) ? 1 : 0));\n}\n\nfunction getSource(satellite, beams, index) {\n  let hasBeam;\n  if (beams) {\n    const satBeams = beams.filter((b) => b.customerId === satellite.id);\n    hasBeam = satBeams.reduce((prev, current) => current.activated[index] || prev, false);\n  } else {\n    hasBeam = false;\n  }\n\n  const hasSun = !satellite.performance.isEclipsed[index];\n\n  if (!hasSun && hasBeam) return 'beam';\n  if (hasSun && hasBeam) return 'sun and beam';\n  if (!hasSun && !hasBeam) return 'eclipsed';\n  if (hasSun && !hasBeam) return 'sun';\n}\n\nfunction getSources(satellite, beams, timeArray) {\n  return timeArray.map((time, index) => getSource(satellite, beams, index));\n}\n\nfunction getChargeStates(satellite, timeArray, hasBeams = true) {\n  const delta = ((SIM_LENGTH / (60 * 60 * 1000)) / timeArray.length);\n  let chargeState = 1;\n  return timeArray.map((time, index) => {\n    let source = satellite.performance.sources[index];\n    if (hasBeams === false) {\n      if (source === 'sun and beam') source = 'sun';\n      if (source === 'beam') source = 'eclipsed';\n    }\n    chargeState = getChargeState(satellite.params, satellite.performance.currentDuties[index], source, chargeState, delta);\n    if (chargeState > 1) return 1;\n    if (chargeState < 0) return 0;\n    return chargeState;\n  });\n}\n\nfunction getDischargeSaved(satellite) {\n  let timeCharged = 0;\n  const totalCurrentBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    return netCurrent + prev;\n  }, 0);\n  const totalDischargeBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    const netCurrent = getNetCurrent(satellite.params, source, currentDuty);\n    if (netCurrent < 0) return netCurrent + prev;\n    return prev;\n  }, 0);\n  const totalCurrentNoBeams = satellite.performance.sources.reduce((prev, source, i) => {\n    const currentDuty = satellite.performance.currentDuties[i];\n    let sourceNoBeams = source;\n    if (source === 'sun and beam') {\n      sourceNoBeams = 'sun';\n      timeCharged += 1;\n    } else if (source === 'beam') {\n      timeCharged += 1;\n      sourceNoBeams = 'eclipsed';\n    }\n    const netCurrentNoBeams = getNetCurrent(satellite.params, sourceNoBeams, currentDuty);\n    return netCurrentNoBeams + prev;\n  }, 0);\n  const frames = satellite.performance.sources.length;\n  const totalHours = (SIM_LENGTH / (1000 * 60 * 60)) / frames;\n  const totalDischarge = Math.abs(totalDischargeBeams * totalHours);\n  const dischargeSaved = (totalCurrentBeams - totalCurrentNoBeams) * totalHours;\n  timeCharged = ((timeCharged / frames) * SIM_LENGTH) / (1000 * 60);\n  return [totalDischarge, dischargeSaved, timeCharged];\n}\n\nfunction getLowestChargeState(satellite) {\n  const lowestBeams = satellite.performance.chargeState.reduce((prev, current) => (current < prev ? current : prev), 1);\n  const lowestNoBeams = satellite.performance.chargeStateNoBeams.reduce((prev, current) => (current < prev ? current : prev), 1);\n  return [lowestBeams, lowestNoBeams];\n}\n\nexport {\n  getTimeArray,\n  getSatellitePositions,\n  getSunPositions,\n  getEarthRotationAngles,\n  getEclipsedArray,\n  getCurrentDuties,\n  getSources,\n  getChargeStates,\n  getBeams,\n  getBeamDuties,\n  getDischargeSaved,\n  getLowestChargeState,\n};\n","/* eslint-disable no-loop-func */\n/* eslint-disable no-await-in-loop */\nimport { Observable } from 'threads/observable';\nimport { expose } from 'threads/worker';\nimport optimizeSpacePower from '../optimizer';\n\nexpose({\n  optimize(req) {\n    const optimizeGen = optimizeSpacePower(req);\n    return new Observable(async (observer) => {\n      let result = { done: false, value: null };\n      while (!result.done) {\n        result = await optimizeGen.next();\n        console.log(result);\n        observer.next(result.value);\n      }\n      observer.complete();\n    });\n  },\n});\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-continue */\n/* eslint-disable no-console */\n/* eslint-disable import/prefer-default-export */\nimport {\n  pi,\n  tumin,\n  deg2rad,\n  earthRadius,\n} from 'satellite.js/lib/constants';\n\nimport { jday, days2mdhms } from 'satellite.js/lib/ext';\n\nimport sgp4init from 'satellite.js/lib/propagation/sgp4init';\n\nimport * as satelliteUtils from 'satellite.js';\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\nfunction extractTLE(longstr1, longstr2) {\n  const orbitElements = {};\n\n  orbitElements.epochYear = parseInt(longstr1.substring(18, 20), 10);\n  orbitElements.epochDays = parseFloat(longstr1.substring(20, 32));\n  orbitElements.meanMotionDot = parseFloat(longstr1.substring(33, 43));\n  orbitElements.meanMotionDoubleDot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  orbitElements.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n\n  // satrec.satnum = longstr2.substring(2, 7);\n  orbitElements.inclination = parseFloat(longstr2.substring(8, 16));\n  orbitElements.rightAscension = parseFloat(longstr2.substring(17, 25));\n  orbitElements.eccentricity = parseFloat(`.${longstr2.substring(26, 33)}`);\n  orbitElements.perigee = parseFloat(longstr2.substring(34, 42));\n  orbitElements.meanAnomaly = parseFloat(longstr2.substring(43, 51));\n  orbitElements.meanMotion = parseFloat(longstr2.substring(52, 63));\n  let year;\n  if (orbitElements.epochYear < 57) {\n    year = orbitElements.epochYear + 2000;\n  } else {\n    year = orbitElements.epochYear + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, orbitElements.epochDays);\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  orbitElements.epoch = new Date(year, mon, day, hr, minute, sec);\n\n  return orbitElements;\n}\n\nfunction daysIntoYear(date) {\n  return (\n    (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n      - Date.UTC(date.getFullYear(), 0, 0))\n    / 24\n    / 60\n    / 60\n    / 1000\n  );\n}\n\nfunction generateTLE(orbitElements) {\n  const {\n    epoch,\n    meanMotionDot,\n    bstar,\n    inclination,\n    rightAscension,\n    eccentricity,\n    perigee,\n    meanAnomaly,\n    meanMotion,\n  } = orbitElements;\n  let epochYr = String(epoch.getYear());\n  if (epochYr > 100) epochYr = epochYr.substring(1);\n\n  let epochDay = daysIntoYear(epoch);\n  if (epochDay < 100) epochDay = `0${epochDay}`;\n\n  const epochFraction = String(\n    (\n      epoch.getHours() / 24\n      + epoch.getMinutes() / (60 * 24)\n      + epoch.getSeconds() / (60 * 60 * 24)\n    ).toFixed(8),\n  ).substring(1);\n\n  let meanMotionDotString = String(\n    Number(meanMotionDot).toFixed(8),\n  ).substring(1);\n  if (meanMotionDot < 0) { meanMotionDotString = `-${meanMotionDotString.substring(1)}`; }\n  if (meanMotionDot >= 0) { meanMotionDotString = ` ${meanMotionDotString}`; }\n\n  let bstarMant = String(Number(bstar).toExponential(5))\n    .split('.')\n    .join('')\n    .substring(0, 6);\n  if (bstar >= 0) bstarMant = ` ${bstarMant.substring(0, 5)}`;\n  let bstarExp = 0;\n  if (Number(bstar) !== 0) bstarExp = Math.ceil(Math.log10(Math.abs(bstar)));\n  else bstarExp = '+0';\n\n  const tle1 = `1 00000C 00000A   ${epochYr}${epochDay}${epochFraction} ${meanMotionDotString}  00000-0 ${bstarMant}${bstarExp} 0  0000`;\n  const inclinationString = String(Number(inclination).toFixed(4));\n  // if (inclination < 100) inclinationString = ` ${inclinationString}`;\n\n  const rightAscensionString = String(Number(rightAscension).toFixed(4));\n  // if (rightAscension < 100) { rightAscensionString = ` ${rightAscensionString}`; }\n\n  const eccentricityString = String(\n    Number(eccentricity).toFixed(8),\n  ).substring(2, 9);\n  let perigeeString = String(Number(perigee).toFixed(4));\n  if (perigee < 100) perigeeString = ` ${perigeeString}`;\n\n  const meanAnomalyString = String(Number(meanAnomaly).toFixed(4));\n  // if (meanAnomalyString < 100) { meanAnomalyString = ` ${meanAnomalyString}`; }\n\n  const meanMotionString = String(Number(meanMotion).toPrecision(9));\n  const tle2 = `2 00000 ${inclinationString.padStart(8)} ${rightAscensionString.padStart(8)} ${eccentricityString} ${perigeeString.padStart(8)} ${meanAnomalyString} ${meanMotionString.padStart(13)}    00`;\n\n  return {\n    tle1,\n    tle2,\n  };\n}\n\nfunction twoline2satrec(longstr1, longstr2) {\n  const opsmode = 'i';\n  const xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n  let year = 0;\n\n  const satrec = {};\n  satrec.error = 0;\n\n  satrec.satnum = longstr1.substring(2, 7);\n\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\n    `.${parseInt(\n      longstr1.substring(44, 50),\n      10,\n    )}E${longstr1.substring(50, 52)}`,\n  );\n  satrec.bstar = parseFloat(\n    `${longstr1.substring(53, 54)}.${parseInt(\n      longstr1.substring(54, 59),\n      10,\n    )}E${longstr1.substring(59, 61)}`,\n  );\n  // satrec.satnum = longstr2.substring(2, 7);\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(`.${longstr2.substring(26, 33)}`);\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63));\n  // ---- find no, ndot, nddot ----\n  satrec.notle = satrec.no;\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n  // ---- convert to sgp4 units ----\n  satrec.a = (satrec.no * tumin) ** (-2.0 / 3.0);\n  satrec.ndottle = satrec.ndot;\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n  satrec.nddot /= xpdotp * 1440.0 * 1440;\n\n  // ---- find standard orbital elements ----\n  satrec.inclotle = satrec.inclo;\n  satrec.inclo *= deg2rad;\n  satrec.nodeotle = satrec.nodeo;\n  satrec.nodeo *= deg2rad;\n  satrec.argpotle = satrec.argpo;\n  satrec.argpo *= deg2rad;\n  satrec.motle = satrec.mo;\n  satrec.mo *= deg2rad;\n\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0;\n\n  // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  const mdhmsResult = days2mdhms(year, satrec.epochdays);\n\n  const {\n    mon, day, hr, minute, sec,\n  } = mdhmsResult;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec);\n  satrec.epochdate = new Date(year, mon, day, hr, minute, sec);\n  satrec.epochdatetimelocal = new Date(\n    satrec.epochdate.getTime() - satrec.epochdate.getTimezoneOffset() * 60000,\n  ).toISOString().substring(0, 19);\n\n  //  ---------------- initialize the orbit at sgp4epoch -------------------\n  sgp4init(satrec, {\n    opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo,\n  });\n\n  return satrec;\n}\n\nfunction getCorsFreeUrl(url) {\n  return `https://api.allorigins.win/raw?url=${url}`;\n}\n\nfunction parseTLEs(fileContent) {\n  const result = [];\n  const lines = fileContent.split('\\n');\n  if (lines < 2) throw new Error('Error parsing TLE');\n  let current = null;\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i].trim();\n    if (line.length === 0) continue;\n\n    if (line[0] !== '1' && line[0] !== '2') {\n      current = {\n        name: line,\n      };\n    } else if (line[0] === '1') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle1: line },\n      };\n    } else if (line[0] === '2') {\n      current = {\n        ...current,\n        tles: { ...current.tles, tle2: line },\n      };\n      result.push(current);\n    } else throw new Error('Error parsing TLE');\n  }\n\n  return result;\n}\n\nfunction loadTLEsJSON(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => JSON.parse(text));\n    }\n  });\n}\n\nfunction loadTLEs(url) {\n  return fetch(url).then((res) => {\n    if (res.ok) {\n      return res.text().then((text) => {\n        const satellites = parseTLEs(text);\n        console.log(text, satellites);\n        return satellites;\n      });\n    }\n  });\n}\n\nconst toThree = (v) => ({\n  x: v.x / earthRadius,\n  y: v.z / earthRadius,\n  z: -v.y / earthRadius,\n});\n\nfunction getPositionFromTLE(satellite, date) {\n  const positionVelocity = satelliteUtils.propagate(\n    satellite.orbit,\n    date,\n  );\n  const positionEci = positionVelocity.position;\n  return toThree(positionEci);\n}\n\nfunction getOrbitAtTime(satellite, time) {\n  const pos = getPositionFromTLE(satellite, time);\n  return { x: pos.x, y: pos.y, z: pos.z };\n}\n\nfunction getSunPosition(time) {\n  const N = time.getTime() / 86400000 + 2440587 - 2451545;\n  let L = 4.89495042 + 0.0172027923937 * N;\n  if (L > 2 * Math.PI) L -= 2 * Math.PI;\n  let g = 6.240040768 + 0.0172019703436 * N;\n  if (g > 2 * Math.PI) g -= 2 * Math.PI;\n  const longitude = L + 0.033423055 * Math.sin(g) + 0.0003490659 * Math.sin(g);\n  const distance = 1.00014 - 0.01671 * Math.cos(g) - 0.00014 * Math.cos(2 * g)\n  * (149597870.7 / earthRadius);\n  const obliquity = 0.40907027 - 6.981317008e-9 * N;\n  const y = (distance * Math.sin(obliquity) * Math.sin(longitude));\n\n  const x = (distance * Math.cos(longitude));\n  const z = -(distance * Math.cos(obliquity) * Math.sin(longitude));\n\n  return { x, y, z };\n}\n\nfunction getEarthRotationAngle(date) {\n  const JD = date / 86400000 + 2440587 - 2451545;\n  return 2 * Math.PI * (0.779057273264 + 1.002737811911355 * JD);\n}\n\nfunction getDistance(position1, position2) {\n  const a = position1.x - position2.x;\n  const b = position1.y - position2.y;\n  const c = position1.z - position2.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport {\n  twoline2satrec,\n  generateTLE,\n  extractTLE,\n  getOrbitAtTime,\n  getSunPosition,\n  getEarthRotationAngle,\n  getDistance,\n  parseTLEs,\n  getCorsFreeUrl,\n  loadTLEs,\n  loadTLEsJSON,\n};\n","const SIM_LENGTH = 24 * 60 * 60 * 2 * 1000; // ms\nconst FPmS = 120 / 1000;\n\nconst BEAM_DISTANCE = 1000;\nconst MIN_SPEED = 600;\nconst FRAMES = SIM_LENGTH * (FPmS / MIN_SPEED);\n\nexport {\n  FPmS,\n  SIM_LENGTH,\n  MIN_SPEED,\n  FRAMES,\n  BEAM_DISTANCE,\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/prefer-default-export */\nimport { earthRadius } from 'satellite.js/lib/constants';\nimport { Vector3 } from 'three';\n\nconst earthPosition = new Vector3(0, 0, 0);\nconst sunPosition = new Vector3();\nconst satPosition = new Vector3();\nconst sunEarth = new Vector3();\nconst sunSat = new Vector3();\n\nfunction isEclipsed(satellite, sun) {\n  sunPosition.fromArray([sun.x, sun.y, sun.z]);\n  satPosition.fromArray([satellite.x, satellite.y, satellite.z]);\n\n  sunEarth.subVectors(earthPosition, sunPosition);\n  sunSat.subVectors(satPosition, earthPosition);\n\n  const angle = sunEarth.angleTo(sunSat);\n\n  const sunEarthDistance = sunPosition.distanceTo(earthPosition);\n  const sunSatDistance = sunPosition.distanceTo(satPosition);\n  const limbAngle = Math.atan2(earthRadius, sunEarthDistance);\n\n  if (angle > limbAngle || sunSatDistance < sunEarthDistance) {\n    return false;\n  }\n  return true;\n}\n\nfunction getNetCurrent(params, source, currentDuty) {\n  const powerProfile = params.load.powerProfiles[source];\n  return powerProfile[currentDuty];\n}\n\nfunction getChargeState(\n  params,\n  currentDuty,\n  source,\n  chargeState,\n  delta,\n) {\n  const netCurrent = getNetCurrent(params, source, currentDuty);\n  const { capacity } = params.battery;\n\n  if (chargeState >= 1.0 && netCurrent >= 0) {\n    return 1;\n  }\n\n  if (chargeState <= 0 && netCurrent <= 0) {\n    return 0;\n  }\n\n  return (\n    (\n      (chargeState * capacity)\n      + (delta * netCurrent)\n    ) / capacity\n  );\n}\n\nexport { isEclipsed, getChargeState, getNetCurrent };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [546,869,752,105], () => (__webpack_require__(52554)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t554: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","SatelliteSchema","Yup","shape","name","min","max","trim","color","matches","orbit","tle","list","meanMotionDot","required","bstar","inclination","rightAscension","eccentricity","perigee","meanAnomaly","meanMotion","power","pv","voltage","currentDensity","area","powerStoringConsumption","preset","oneOf","battery","capacity","duties","of","type","priority","integer","consumption","duration","when","is","then","cycles","simulateBaseData","constellations","payload","satelliteCount","satellites","spacePowersCount","spacePowerIndices","offsets","baseSatellite","length","frames","tles","generateTLE","epoch","Date","twoline2satrec","tle1","tle2","time","getTimeArray","epochdate","getSunPositions","getEarthRotationAngles","initializeCustomers","sun","customers","forEach","constellation","satellite","push","createSatellite","id","customer","positions","getSatellitePositions","params","performance","currentDuties","getCurrentDuties","load","isEclipsed","getEclipsedArray","initializeSpacePowers","spacePowers","indices","generateIndices","counts","getIndexCounts","getOffsets","index","offset","createPowerSatellite","generatePartialMission","req","SIM_LENGTH","FRAMES","earth","map","randomOrbit","Math","random","async","GENERATIONS","optimization","generations","POPULATION","population","partialMission","pool","Pool","worker","spawn","Worker","URL","initialize","threads","testOrbit","elements","slice","err","Error","randomFunction","variables","success","e","Array","from","floor","generateMutation","entity","angleDrift","eccentricityDrift","indexDrift","i","newValue","newEntity","gen","genetic","log","best","seed","console","count","estimate","bestOne","fitness","breed","solve","Genetic","mutationFunction","mutation","fitnessFunction","testReq","task","queue","calculate","populationSize","fittestNSurvives","select1","Select","select2","mutateProbablity","deduplicate","result","done","optimized","value","PV_SOURCES","sunOnly","efficiency","beamOnly","sunAndBeam","eclipsed","POWER_SAT_REQUEST","getDutyIntervals","duty","period","Number","interval","totalCycles","start","valueOf","end","isCustomer","getOrbitAtTime","error","PI","no","sources","intervals","unshift","powerProfiles","newPowerProfiles","Object","entries","pvSource","pvPower","loadProfiles","netCurrent","generatePowerProfiles","newOrbit","spacePowerColor","uuidv4","customersCount","ratio","v","filter","multiplier","newOffsets","initial","initialMillisecs","getTime","mspf","timeArray","x","y","z","pos","getSunPosition","getEarthRotationAngle","satPosition","sunPosition","currentDuty","cycle","expose","optimize","optimizeGen","optimizeSpacePower","Observable","observer","complete","orbitElements","epochYr","String","getYear","substring","epochDay","date","UTC","getFullYear","getMonth","getDate","epochFraction","getHours","getMinutes","getSeconds","toFixed","meanMotionDotString","bstarMant","toExponential","split","join","bstarExp","ceil","log10","abs","inclinationString","rightAscensionString","eccentricityString","perigeeString","meanAnomalyString","meanMotionString","toPrecision","padStart","longstr1","longstr2","xpdotp","pi","year","satrec","satnum","epochyr","parseInt","epochdays","parseFloat","ndot","nddot","inclo","nodeo","ecco","argpo","mo","notle","a","tumin","ndottle","inclotle","deg2rad","nodeotle","argpotle","motle","alta","altp","mdhmsResult","days2mdhms","mon","day","hr","minute","sec","jdsatepoch","jday","epochdatetimelocal","getTimezoneOffset","toISOString","sgp4init","opsmode","satn","xbstar","xecco","xargpo","xinclo","xmo","xno","xnodeo","satelliteUtils","position","earthRadius","getPositionFromTLE","N","L","g","longitude","sin","distance","cos","obliquity","JD","earthPosition","Vector3","sunEarth","sunSat","fromArray","subVectors","angle","angleTo","sunEarthDistance","distanceTo","sunSatDistance","atan2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","__webpack_exports__","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","j","keys","every","key","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","p","b","self","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","data","moreModules","runtime","pop"],"sourceRoot":""}